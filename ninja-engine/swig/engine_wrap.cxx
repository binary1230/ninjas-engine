/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#include "stdafx.h"



#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_engine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_engine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_engine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "globals.h"
#include "gameOptions.h"
#include "gameMode.h"
#include "gameWorld.h"
#include "gameState.h"
#include "objects/objectPlayer.h"
#include "objectFactory.h"


#include "editor.h"


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <stdio.h>

SWIGINTERN std::vector< Object * > *new_std_vector_Sl_Object_Sm__Sg___SWIG_2(int capacity){
        std::vector< Object * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Object * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Object *std_vector_Sl_Object_Sm__Sg__getitemcopy(std::vector< Object * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Object *const &std_vector_Sl_Object_Sm__Sg__getitem(std::vector< Object * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__setitem(std::vector< Object * > *self,int index,Object *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__AddRange(std::vector< Object * > *self,std::vector< Object * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Object * > *std_vector_Sl_Object_Sm__Sg__GetRange(std::vector< Object * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Object * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__Insert(std::vector< Object * > *self,int index,Object *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__InsertRange(std::vector< Object * > *self,int index,std::vector< Object * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__RemoveAt(std::vector< Object * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__RemoveRange(std::vector< Object * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Object * > *std_vector_Sl_Object_Sm__Sg__Repeat(Object *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Object * >(count, value);
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__Reverse__SWIG_0(std::vector< Object * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__Reverse__SWIG_1(std::vector< Object * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Object_Sm__Sg__SetRange(std::vector< Object * > *self,int index,std::vector< Object * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_Object_Sm__Sg__Contains(std::vector< Object * > *self,Object *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_Object_Sm__Sg__IndexOf(std::vector< Object * > *self,Object *const &value){
        int index = -1;
        std::vector< Object * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_Object_Sm__Sg__LastIndexOf(std::vector< Object * > *self,Object *const &value){
        int index = -1;
        std::vector< Object * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_Object_Sm__Sg__Remove(std::vector< Object * > *self,Object *const &value){
        std::vector< Object * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< ObjectLayer * > *new_std_vector_Sl_ObjectLayer_Sm__Sg___SWIG_2(int capacity){
        std::vector< ObjectLayer * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ObjectLayer * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ObjectLayer *std_vector_Sl_ObjectLayer_Sm__Sg__getitemcopy(std::vector< ObjectLayer * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ObjectLayer *const &std_vector_Sl_ObjectLayer_Sm__Sg__getitem(std::vector< ObjectLayer * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__setitem(std::vector< ObjectLayer * > *self,int index,ObjectLayer *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__AddRange(std::vector< ObjectLayer * > *self,std::vector< ObjectLayer * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ObjectLayer * > *std_vector_Sl_ObjectLayer_Sm__Sg__GetRange(std::vector< ObjectLayer * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ObjectLayer * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__Insert(std::vector< ObjectLayer * > *self,int index,ObjectLayer *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__InsertRange(std::vector< ObjectLayer * > *self,int index,std::vector< ObjectLayer * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__RemoveAt(std::vector< ObjectLayer * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__RemoveRange(std::vector< ObjectLayer * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ObjectLayer * > *std_vector_Sl_ObjectLayer_Sm__Sg__Repeat(ObjectLayer *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ObjectLayer * >(count, value);
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__Reverse__SWIG_0(std::vector< ObjectLayer * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__Reverse__SWIG_1(std::vector< ObjectLayer * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ObjectLayer_Sm__Sg__SetRange(std::vector< ObjectLayer * > *self,int index,std::vector< ObjectLayer * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_ObjectLayer_Sm__Sg__Contains(std::vector< ObjectLayer * > *self,ObjectLayer *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_ObjectLayer_Sm__Sg__IndexOf(std::vector< ObjectLayer * > *self,ObjectLayer *const &value){
        int index = -1;
        std::vector< ObjectLayer * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_ObjectLayer_Sm__Sg__LastIndexOf(std::vector< ObjectLayer * > *self,ObjectLayer *const &value){
        int index = -1;
        std::vector< ObjectLayer * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_ObjectLayer_Sm__Sg__Remove(std::vector< ObjectLayer * > *self,ObjectLayer *const &value){
        std::vector< ObjectLayer * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#define Object_X_get(self_) self_->GetPropX()
#define Object_X_set(self_, val_) self_->SetPropX(val_)
  

#define Object_Y_get(self_) self_->GetPropY()
#define Object_Y_set(self_, val_) self_->SetPropY(val_)
  


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "engine_wrap.h"

SwigDirector_EditorBaseUI::SwigDirector_EditorBaseUI() : EditorBaseUI(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_EditorBaseUI::OnObjectsChanged() {
  if (!swig_callbackOnObjectsChanged) {
    EditorBaseUI::OnObjectsChanged();
    return;
  } else {
    swig_callbackOnObjectsChanged();
  }
}

void SwigDirector_EditorBaseUI::OnSelectionChanged(Object *selected_object) {
  void * jselected_object = 0 ;
  
  if (!swig_callbackOnSelectionChanged) {
    EditorBaseUI::OnSelectionChanged(selected_object);
    return;
  } else {
    jselected_object = (void *) selected_object; 
    swig_callbackOnSelectionChanged(jselected_object);
  }
}

SwigDirector_EditorBaseUI::~SwigDirector_EditorBaseUI() {
  
}


void SwigDirector_EditorBaseUI::swig_connect_director(SWIG_Callback0_t callbackOnObjectsChanged, SWIG_Callback1_t callbackOnSelectionChanged) {
  swig_callbackOnObjectsChanged = callbackOnObjectsChanged;
  swig_callbackOnSelectionChanged = callbackOnSelectionChanged;
}

void SwigDirector_EditorBaseUI::swig_init_callbacks() {
  swig_callbackOnObjectsChanged = 0;
  swig_callbackOnSelectionChanged = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_Clear(void * jarg1) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_Add(void * jarg1, void * jarg2) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  Object **arg2 = 0 ;
  Object *temp2 = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  temp2 = (Object *)jarg2;
  arg2 = (Object **)&temp2; 
  (arg1)->push_back((Object *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ObjectVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  std::vector< Object * >::size_type result;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  result = ((std::vector< Object * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ObjectVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  std::vector< Object * >::size_type result;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  result = ((std::vector< Object * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  std::vector< Object * >::size_type arg2 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (std::vector< Object * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectVector__SWIG_0() {
  void * jresult ;
  std::vector< Object * > *result = 0 ;
  
  result = (std::vector< Object * > *)new std::vector< Object * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Object * > *arg1 = 0 ;
  std::vector< Object * > *result = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Object * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Object * > *)new std::vector< Object * >((std::vector< Object * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Object * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Object * > *)new_std_vector_Sl_Object_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Object *)std_vector_Sl_Object_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  Object **result = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Object **) &std_vector_Sl_Object_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  Object **arg3 = 0 ;
  Object *temp3 = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Object *)jarg3;
  arg3 = (Object **)&temp3; 
  try {
    std_vector_Sl_Object_Sm__Sg__setitem(arg1,arg2,(Object *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  std::vector< Object * > *arg2 = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (std::vector< Object * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Object * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Object_Sm__Sg__AddRange(arg1,(std::vector< Object * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Object * > *result = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Object * > *)std_vector_Sl_Object_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  Object **arg3 = 0 ;
  Object *temp3 = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Object *)jarg3;
  arg3 = (Object **)&temp3; 
  try {
    std_vector_Sl_Object_Sm__Sg__Insert(arg1,arg2,(Object *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  std::vector< Object * > *arg3 = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Object * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Object * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Object_Sm__Sg__InsertRange(arg1,arg2,(std::vector< Object * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Object_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Object_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Object **arg1 = 0 ;
  int arg2 ;
  Object *temp1 = 0 ;
  std::vector< Object * > *result = 0 ;
  
  temp1 = (Object *)jarg1;
  arg1 = (Object **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Object * > *)std_vector_Sl_Object_Sm__Sg__Repeat((Object *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  std_vector_Sl_Object_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Object_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  int arg2 ;
  std::vector< Object * > *arg3 = 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Object * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Object * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Object_Sm__Sg__SetRange(arg1,arg2,(std::vector< Object * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  Object **arg2 = 0 ;
  Object *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  temp2 = (Object *)jarg2;
  arg2 = (Object **)&temp2; 
  result = (bool)std_vector_Sl_Object_Sm__Sg__Contains(arg1,(Object *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  Object **arg2 = 0 ;
  Object *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  temp2 = (Object *)jarg2;
  arg2 = (Object **)&temp2; 
  result = (int)std_vector_Sl_Object_Sm__Sg__IndexOf(arg1,(Object *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  Object **arg2 = 0 ;
  Object *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  temp2 = (Object *)jarg2;
  arg2 = (Object **)&temp2; 
  result = (int)std_vector_Sl_Object_Sm__Sg__LastIndexOf(arg1,(Object *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  Object **arg2 = 0 ;
  Object *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  temp2 = (Object *)jarg2;
  arg2 = (Object **)&temp2; 
  result = (bool)std_vector_Sl_Object_Sm__Sg__Remove(arg1,(Object *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectVector(void * jarg1) {
  std::vector< Object * > *arg1 = (std::vector< Object * > *) 0 ;
  
  arg1 = (std::vector< Object * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_Clear(void * jarg1) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_Add(void * jarg1, void * jarg2) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  ObjectLayer **arg2 = 0 ;
  ObjectLayer *temp2 = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  temp2 = (ObjectLayer *)jarg2;
  arg2 = (ObjectLayer **)&temp2; 
  (arg1)->push_back((ObjectLayer *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ObjectLayerVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  std::vector< ObjectLayer * >::size_type result;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  result = ((std::vector< ObjectLayer * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ObjectLayerVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  std::vector< ObjectLayer * >::size_type result;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  result = ((std::vector< ObjectLayer * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  std::vector< ObjectLayer * >::size_type arg2 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (std::vector< ObjectLayer * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectLayerVector__SWIG_0() {
  void * jresult ;
  std::vector< ObjectLayer * > *result = 0 ;
  
  result = (std::vector< ObjectLayer * > *)new std::vector< ObjectLayer * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectLayerVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ObjectLayer * > *arg1 = 0 ;
  std::vector< ObjectLayer * > *result = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ObjectLayer * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ObjectLayer * > *)new std::vector< ObjectLayer * >((std::vector< ObjectLayer * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectLayerVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ObjectLayer * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ObjectLayer * > *)new_std_vector_Sl_ObjectLayer_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectLayerVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  ObjectLayer *result = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ObjectLayer *)std_vector_Sl_ObjectLayer_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectLayerVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  ObjectLayer **result = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ObjectLayer **) &std_vector_Sl_ObjectLayer_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  ObjectLayer **arg3 = 0 ;
  ObjectLayer *temp3 = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (ObjectLayer *)jarg3;
  arg3 = (ObjectLayer **)&temp3; 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__setitem(arg1,arg2,(ObjectLayer *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  std::vector< ObjectLayer * > *arg2 = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (std::vector< ObjectLayer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ObjectLayer * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ObjectLayer_Sm__Sg__AddRange(arg1,(std::vector< ObjectLayer * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectLayerVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ObjectLayer * > *result = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ObjectLayer * > *)std_vector_Sl_ObjectLayer_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  ObjectLayer **arg3 = 0 ;
  ObjectLayer *temp3 = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (ObjectLayer *)jarg3;
  arg3 = (ObjectLayer **)&temp3; 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__Insert(arg1,arg2,(ObjectLayer *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  std::vector< ObjectLayer * > *arg3 = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ObjectLayer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ObjectLayer * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__InsertRange(arg1,arg2,(std::vector< ObjectLayer * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectLayerVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ObjectLayer **arg1 = 0 ;
  int arg2 ;
  ObjectLayer *temp1 = 0 ;
  std::vector< ObjectLayer * > *result = 0 ;
  
  temp1 = (ObjectLayer *)jarg1;
  arg1 = (ObjectLayer **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ObjectLayer * > *)std_vector_Sl_ObjectLayer_Sm__Sg__Repeat((ObjectLayer *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  std_vector_Sl_ObjectLayer_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayerVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  int arg2 ;
  std::vector< ObjectLayer * > *arg3 = 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ObjectLayer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ObjectLayer * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ObjectLayer_Sm__Sg__SetRange(arg1,arg2,(std::vector< ObjectLayer * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectLayerVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  ObjectLayer **arg2 = 0 ;
  ObjectLayer *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  temp2 = (ObjectLayer *)jarg2;
  arg2 = (ObjectLayer **)&temp2; 
  result = (bool)std_vector_Sl_ObjectLayer_Sm__Sg__Contains(arg1,(ObjectLayer *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectLayerVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  ObjectLayer **arg2 = 0 ;
  ObjectLayer *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  temp2 = (ObjectLayer *)jarg2;
  arg2 = (ObjectLayer **)&temp2; 
  result = (int)std_vector_Sl_ObjectLayer_Sm__Sg__IndexOf(arg1,(ObjectLayer *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectLayerVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  ObjectLayer **arg2 = 0 ;
  ObjectLayer *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  temp2 = (ObjectLayer *)jarg2;
  arg2 = (ObjectLayer **)&temp2; 
  result = (int)std_vector_Sl_ObjectLayer_Sm__Sg__LastIndexOf(arg1,(ObjectLayer *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectLayerVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  ObjectLayer **arg2 = 0 ;
  ObjectLayer *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  temp2 = (ObjectLayer *)jarg2;
  arg2 = (ObjectLayer **)&temp2; 
  result = (bool)std_vector_Sl_ObjectLayer_Sm__Sg__Remove(arg1,(ObjectLayer *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectLayerVector(void * jarg1) {
  std::vector< ObjectLayer * > *arg1 = (std::vector< ObjectLayer * > *) 0 ;
  
  arg1 = (std::vector< ObjectLayer * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_SCREEN_SIZE_X_get() {
  int jresult ;
  int result;
  
  result = (int)(1024);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_SCREEN_SIZE_Y_get() {
  int jresult ;
  int result;
  
  result = (int)(650);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_VERSION_STRING_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("ninjas-engine");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FPS_get() {
  int jresult ;
  int result;
  
  result = (int)(60);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TIMESTEP_get() {
  int jresult ;
  int result;
  
  result = (int)(1/60);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ONEEIGHTY_OVER_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(57.2957795);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PI_OVER_ONEEIGHTY_get() {
  double jresult ;
  double result;
  
  result = (double)(0.0174532925);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TOLERANCE_get() {
  double jresult ;
  double result;
  
  result = (double)(0.00001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_DEBUG_MSG_LEVEL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_MUSIC_BUFFER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 16));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_MUSIC_DATA_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)((1 << 15));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringSplit(char * jarg1, char * jarg2, void * jarg3) {
  std::string arg1 ;
  std::string arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  StringSplit(arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugTrace(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  DebugTrace((char const *)arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_REDIRECT_STDERR_FILENAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("/Users/dcerquetti/game.log");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameOptions_GetInstance() {
  void * jresult ;
  GameOptions *result = 0 ;
  
  result = (GameOptions *)GameOptions::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_SetInstance(void * jarg1) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  GameOptions::SetInstance(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_CreateInstance() {
  GameOptions::CreateInstance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_FreeInstance() {
  GameOptions::FreeInstance();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_GetPropMapEditorEnabled(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->GetPropMapEditorEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_SetPropMapEditorEnabled(void * jarg1, unsigned int jarg2) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (GameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPropMapEditorEnabled(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameOptions_GetPropFirstMode(void * jarg1) {
  char * jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  std::string result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (arg1)->GetPropFirstMode();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_SetPropFirstMode(void * jarg1, char * jarg2) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  std::string arg2 ;
  
  arg1 = (GameOptions *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetPropFirstMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_PrintOptions(void * jarg1, char * jarg2) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PrintOptions((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_PrintBanner(void * jarg1) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  (arg1)->PrintBanner();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_ParseArguments(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  int arg2 ;
  char **arg3 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  result = (bool)(arg1)->ParseArguments(arg2,(char const *(*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_IsValid(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameOptions_Clear(void * jarg1) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_IsFullscreen(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->IsFullscreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameOptions_GetDemoFilename(void * jarg1) {
  char * jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  result = (char *)(arg1)->GetDemoFilename();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_RecordDemo(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->RecordDemo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_PlaybackDemo(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->PlaybackDemo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameOptions_GraphicsMode(void * jarg1) {
  int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  int result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (int)(arg1)->GraphicsMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameOptions_GetFirstModeOverride(void * jarg1) {
  char * jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  result = (char *)(arg1)->GetFirstModeOverride();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_SoundEnabled(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->SoundEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_GetDebugStartPaused(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->GetDebugStartPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameOptions_GetDebugMessageLevel(void * jarg1) {
  int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  int result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (int)(arg1)->GetDebugMessageLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_DrawGraphics(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->DrawGraphics();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameOptions_WaitForUpdates(void * jarg1) {
  unsigned int jresult ;
  GameOptions *arg1 = (GameOptions *) 0 ;
  bool result;
  
  arg1 = (GameOptions *)jarg1; 
  result = (bool)(arg1)->WaitForUpdates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameOptions(void * jarg1) {
  GameOptions *arg1 = (GameOptions *) 0 ;
  
  arg1 = (GameOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_useExitInfo_set(void * jarg1, unsigned int jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useExitInfo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameModeExitInfo_useExitInfo_get(void * jarg1) {
  unsigned int jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool result;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (bool) ((arg1)->useExitInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_lastModeName_set(void * jarg1, char * jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastModeName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameModeExitInfo_lastModeName_get(void * jarg1) {
  char * jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (std::string *) & ((arg1)->lastModeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_nextModeToLoad_set(void * jarg1, char * jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nextModeToLoad = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameModeExitInfo_nextModeToLoad_get(void * jarg1) {
  char * jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (std::string *) & ((arg1)->nextModeToLoad);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_lastPortalName_set(void * jarg1, char * jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastPortalName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameModeExitInfo_lastPortalName_get(void * jarg1) {
  char * jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (std::string *) & ((arg1)->lastPortalName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_useNextModeToLoad_set(void * jarg1, unsigned int jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useNextModeToLoad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameModeExitInfo_useNextModeToLoad_get(void * jarg1) {
  unsigned int jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool result;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (bool) ((arg1)->useNextModeToLoad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_useLastPortalName_set(void * jarg1, unsigned int jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useLastPortalName = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameModeExitInfo_useLastPortalName_get(void * jarg1) {
  unsigned int jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool result;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (bool) ((arg1)->useLastPortalName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModeExitInfo_showInitialText_set(void * jarg1, unsigned int jarg2) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->showInitialText = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameModeExitInfo_showInitialText_get(void * jarg1) {
  unsigned int jresult ;
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  bool result;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  result = (bool) ((arg1)->showInitialText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameModeExitInfo() {
  void * jresult ;
  GameModeExitInfo *result = 0 ;
  
  result = (GameModeExitInfo *)new GameModeExitInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameModeExitInfo(void * jarg1) {
  GameModeExitInfo *arg1 = (GameModeExitInfo *) 0 ;
  
  arg1 = (GameModeExitInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameMode_Init(void * jarg1, void * jarg2) {
  int jresult ;
  GameMode *arg1 = (GameMode *) 0 ;
  XMLNode arg2 ;
  XMLNode *argp2 ;
  int result;
  
  arg1 = (GameMode *)jarg1; 
  argp2 = (XMLNode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XMLNode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameMode_Shutdown(void * jarg1) {
  GameMode *arg1 = (GameMode *) 0 ;
  
  arg1 = (GameMode *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameMode_Draw(void * jarg1) {
  GameMode *arg1 = (GameMode *) 0 ;
  
  arg1 = (GameMode *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameMode_Update(void * jarg1) {
  GameMode *arg1 = (GameMode *) 0 ;
  
  arg1 = (GameMode *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameMode_SetExitInfo(void * jarg1, void * jarg2) {
  GameMode *arg1 = (GameMode *) 0 ;
  GameModeExitInfo *arg2 = 0 ;
  
  arg1 = (GameMode *)jarg1; 
  arg2 = (GameModeExitInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GameModeExitInfo const & type is null", 0);
    return ;
  } 
  (arg1)->SetExitInfo((GameModeExitInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameMode_GetExitInfo(void * jarg1) {
  void * jresult ;
  GameMode *arg1 = (GameMode *) 0 ;
  GameModeExitInfo *result = 0 ;
  
  arg1 = (GameMode *)jarg1; 
  result = (GameModeExitInfo *) &(arg1)->GetExitInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameMode_SetOldExitInfo(void * jarg1, void * jarg2) {
  GameMode *arg1 = (GameMode *) 0 ;
  GameModeExitInfo *arg2 = 0 ;
  
  arg1 = (GameMode *)jarg1; 
  arg2 = (GameModeExitInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GameModeExitInfo const & type is null", 0);
    return ;
  } 
  (arg1)->SetOldExitInfo((GameModeExitInfo const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameMode_GetOldExitInfo(void * jarg1) {
  void * jresult ;
  GameMode *arg1 = (GameMode *) 0 ;
  GameModeExitInfo *result = 0 ;
  
  arg1 = (GameMode *)jarg1; 
  result = (GameModeExitInfo *) &(arg1)->GetOldExitInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameMode(void * jarg1) {
  GameMode *arg1 = (GameMode *) 0 ;
  
  arg1 = (GameMode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetInstance() {
  void * jresult ;
  GameWorld *result = 0 ;
  
  result = (GameWorld *)GameWorld::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SetInstance(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  GameWorld::SetInstance(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_CreateInstance() {
  GameWorld::CreateInstance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_FreeInstance() {
  GameWorld::FreeInstance();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameWorld_GetPropAllowExiting(void * jarg1) {
  unsigned int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (bool)(arg1)->GetPropAllowExiting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SetPropAllowExiting(void * jarg1, unsigned int jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPropAllowExiting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld__camera_set(void * jarg1, void * jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  Camera *arg2 = (Camera *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (Camera *)jarg2; 
  if (arg1) (arg1)->_camera = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld__camera_get(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  result = (Camera *) ((arg1)->_camera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_m_pkCameraLookatTarget_set(void * jarg1, void * jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (arg1) (arg1)->m_pkCameraLookatTarget = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_m_pkCameraLookatTarget_get(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  Object *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  result = (Object *) ((arg1)->m_pkCameraLookatTarget);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetObjects(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  std::vector< Object * > result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (arg1)->GetObjects();
  jresult = new std::vector< Object * >((const std::vector< Object * > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameWorld_Init(void * jarg1, void * jarg2) {
  int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  XMLNode arg2 ;
  XMLNode *argp2 ;
  int result;
  
  arg1 = (GameWorld *)jarg1; 
  argp2 = (XMLNode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XMLNode", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_Shutdown(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetEditor(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  Editor *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  result = (Editor *)(arg1)->GetEditor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameWorld_IsLoading(void * jarg1) {
  unsigned int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (bool)(arg1)->IsLoading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameWorld_JumpedBackFromADoor(void * jarg1) {
  unsigned int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (bool)((GameWorld const *)arg1)->JumpedBackFromADoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SetModalObject(void * jarg1, void * jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->SetModalObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_AddObject__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool arg3 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_AddObject__SWIG_1(void * jarg1, void * jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->AddObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_FindLayer(void * jarg1, char * jarg2) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  char *arg2 = (char *) 0 ;
  ObjectLayer *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ObjectLayer *)(arg1)->FindLayer((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetLayers(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  std::vector< ObjectLayer * > result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (arg1)->GetLayers();
  jresult = new std::vector< ObjectLayer * >((const std::vector< ObjectLayer * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetPlayer(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  uint arg2 ;
  ObjectPlayer *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (uint)jarg2; 
  result = (ObjectPlayer *)(arg1)->GetPlayer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameWorld_GetNumPlayers(void * jarg1) {
  unsigned int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  uint result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (uint)(arg1)->GetNumPlayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_Draw(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_Update(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_DoMainGameUpdate(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  (arg1)->DoMainGameUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SaveWorldOverCurrentFile(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  (arg1)->SaveWorldOverCurrentFile();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_CreateWorld(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  GameWorld *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (GameWorld *)GameWorld::CreateWorld(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameWorld_GetWidth(void * jarg1) {
  int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  int result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (int)(arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameWorld_GetHeight(void * jarg1) {
  int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  int result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (int)(arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SetCameraShake__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->SetCameraShake(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SetCameraShake__SWIG_1(void * jarg1, unsigned int jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCameraShake(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_TransformWorldToView(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->TransformWorldToView(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_TransformViewToScreen(void * jarg1, void * jarg2, void * jarg3) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->TransformViewToScreen(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetPlayerCamera(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  CameraFollow *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  result = (CameraFollow *)(arg1)->GetPlayerCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_ShowText__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ShowText((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_ShowText__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ShowText((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_ShowText__SWIG_2(void * jarg1, char * jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ShowText((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_FindObjectByID(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  unsigned long arg2 ;
  Object *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (Object *)(arg1)->FindObjectByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameWorld_GetCamera(void * jarg1) {
  void * jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  result = (Camera *)(arg1)->GetCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_AllowPlayerOffscreen(void * jarg1, unsigned int jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (GameWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->AllowPlayerOffscreen(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameWorld_PlayerAllowedOffscreen(void * jarg1) {
  unsigned int jresult ;
  GameWorld *arg1 = (GameWorld *) 0 ;
  bool result;
  
  arg1 = (GameWorld *)jarg1; 
  result = (bool)(arg1)->PlayerAllowedOffscreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SaveWorld__SWIG_0(void * jarg1, char * jarg2) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  std::string arg2 ;
  
  arg1 = (GameWorld *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SaveWorld(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameWorld_SaveWorld__SWIG_1(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  (arg1)->SaveWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameWorld(void * jarg1) {
  GameWorld *arg1 = (GameWorld *) 0 ;
  
  arg1 = (GameWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameState_GetInstance() {
  void * jresult ;
  GameState *result = 0 ;
  
  result = (GameState *)GameState::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_SetInstance(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  GameState::SetInstance(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_CreateInstance() {
  GameState::CreateInstance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_FreeInstance() {
  GameState::FreeInstance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_Shutdown(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameState_Init(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  GameState *arg1 = (GameState *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  bool result;
  
  arg1 = (GameState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char **)jarg3; 
  result = (bool)(arg1)->Init(arg2,(char const **)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_RunMainLoop_BlockingHelper(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->RunMainLoop_BlockingHelper();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_ProcessEvents(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->ProcessEvents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_TickIfNeeded(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->TickIfNeeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_Tick(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->Tick();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_UpdateGlobalInput(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->UpdateGlobalInput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_SetRandomSeed(void * jarg1, int jarg2) {
  GameState *arg1 = (GameState *) 0 ;
  int arg2 ;
  
  arg1 = (GameState *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRandomSeed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameState_IsPaused(void * jarg1) {
  unsigned int jresult ;
  GameState *arg1 = (GameState *) 0 ;
  bool result;
  
  arg1 = (GameState *)jarg1; 
  result = (bool)(arg1)->IsPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_SetPaused(void * jarg1, unsigned int jarg2) {
  GameState *arg1 = (GameState *) 0 ;
  bool arg2 ;
  
  arg1 = (GameState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPaused(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameState_GetRandomSeed(void * jarg1) {
  int jresult ;
  GameState *arg1 = (GameState *) 0 ;
  int result;
  
  arg1 = (GameState *)jarg1; 
  result = (int)((GameState const *)arg1)->GetRandomSeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameState_IsPlayingBackDemo(void * jarg1) {
  unsigned int jresult ;
  GameState *arg1 = (GameState *) 0 ;
  bool result;
  
  arg1 = (GameState *)jarg1; 
  result = (bool)(arg1)->IsPlayingBackDemo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_SignalGameExit(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->SignalGameExit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_SignalEndCurrentMode(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  (arg1)->SignalEndCurrentMode();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameState_ShouldExit(void * jarg1) {
  unsigned int jresult ;
  GameState *arg1 = (GameState *) 0 ;
  bool result;
  
  arg1 = (GameState *)jarg1; 
  result = (bool)(arg1)->ShouldExit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameState(void * jarg1) {
  GameState *arg1 = (GameState *) 0 ;
  
  arg1 = (GameState *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameState_GetPropPhysicsDebugDraw(void * jarg1) {
  unsigned int jresult ;
  GameState *arg1 = (GameState *) 0 ;
  bool result;
  
  arg1 = (GameState *)jarg1; 
  result = (bool)(arg1)->GetPropPhysicsDebugDraw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameState_SetPropPhysicsDebugDraw(void * jarg1, unsigned int jarg2) {
  GameState *arg1 = (GameState *) 0 ;
  bool arg2 ;
  
  arg1 = (GameState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPropPhysicsDebugDraw(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectLayer_Init(void * jarg1) {
  unsigned int jresult ;
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  bool result;
  
  arg1 = (ObjectLayer *)jarg1; 
  result = (bool)(arg1)->Init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_Shutdown(void * jarg1) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_SetName(void * jarg1, char * jarg2) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ObjectLayer_GetName(void * jarg1) {
  char * jresult ;
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_SetScrollSpeed(void * jarg1, float jarg2) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  float arg2 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetScrollSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ObjectLayer_GetScrollSpeed(void * jarg1) {
  float jresult ;
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  float result;
  
  arg1 = (ObjectLayer *)jarg1; 
  result = (float)(arg1)->GetScrollSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectLayer_IsVisible(void * jarg1) {
  unsigned int jresult ;
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  bool result;
  
  arg1 = (ObjectLayer *)jarg1; 
  result = (bool)(arg1)->IsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_SetVisible(void * jarg1, unsigned int jarg2) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_Draw(void * jarg1) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_AddObject(void * jarg1, void * jarg2) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->AddObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectLayer_RemoveObject(void * jarg1, void * jarg2) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->RemoveObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectLayer() {
  void * jresult ;
  ObjectLayer *result = 0 ;
  
  result = (ObjectLayer *)new ObjectLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectLayer(void * jarg1) {
  ObjectLayer *arg1 = (ObjectLayer *) 0 ;
  
  arg1 = (ObjectLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionDirection_up_set(void * jarg1, unsigned int jarg2) {
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (CollisionDirection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->up = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionDirection_up_get(void * jarg1) {
  unsigned int jresult ;
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int result;
  
  arg1 = (CollisionDirection *)jarg1; 
  result = (unsigned int) ((arg1)->up);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionDirection_down_set(void * jarg1, unsigned int jarg2) {
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (CollisionDirection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->down = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionDirection_down_get(void * jarg1) {
  unsigned int jresult ;
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int result;
  
  arg1 = (CollisionDirection *)jarg1; 
  result = (unsigned int) ((arg1)->down);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionDirection_left_set(void * jarg1, unsigned int jarg2) {
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (CollisionDirection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionDirection_left_get(void * jarg1) {
  unsigned int jresult ;
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int result;
  
  arg1 = (CollisionDirection *)jarg1; 
  result = (unsigned int) ((arg1)->left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionDirection_right_set(void * jarg1, unsigned int jarg2) {
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (CollisionDirection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionDirection_right_get(void * jarg1) {
  unsigned int jresult ;
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  unsigned int result;
  
  arg1 = (CollisionDirection *)jarg1; 
  result = (unsigned int) ((arg1)->right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionDirection() {
  void * jresult ;
  CollisionDirection *result = 0 ;
  
  result = (CollisionDirection *)new CollisionDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CollisionDirection(void * jarg1) {
  CollisionDirection *arg1 = (CollisionDirection *) 0 ;
  
  arg1 = (CollisionDirection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_feels_gravity_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->feels_gravity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_feels_gravity_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->feels_gravity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_feels_user_input_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->feels_user_input = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_feels_user_input_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->feels_user_input);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_feels_friction_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->feels_friction = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_feels_friction_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->feels_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_spawns_enemies_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spawns_enemies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_spawns_enemies_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->spawns_enemies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_uses_physics_engine_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->uses_physics_engine = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_uses_physics_engine_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->uses_physics_engine);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_is_static_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_static = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_is_static_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->is_static);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_is_sensor_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_sensor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_is_sensor_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->is_sensor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_ignores_physics_rotation_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignores_physics_rotation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_ignores_physics_rotation_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->ignores_physics_rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_do_our_own_rotation_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->do_our_own_rotation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_do_our_own_rotation_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->do_our_own_rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_use_angled_corners_collision_box_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->use_angled_corners_collision_box = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_use_angled_corners_collision_box_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->use_angled_corners_collision_box);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectProperties_is_overlay_set(void * jarg1, unsigned int jarg2) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_overlay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectProperties_is_overlay_get(void * jarg1) {
  unsigned int jresult ;
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  bool result;
  
  arg1 = (ObjectProperties *)jarg1; 
  result = (bool) ((arg1)->is_overlay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectProperties() {
  void * jresult ;
  ObjectProperties *result = 0 ;
  
  result = (ObjectProperties *)new ObjectProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectProperties(void * jarg1) {
  ObjectProperties *arg1 = (ObjectProperties *) 0 ;
  
  arg1 = (ObjectProperties *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearProperties(void * jarg1) {
  ObjectProperties *arg1 = 0 ;
  
  arg1 = (ObjectProperties *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ObjectProperties & type is null", 0);
    return ;
  } 
  ClearProperties(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_debug_draw_bounding_boxes_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Object::debug_draw_bounding_boxes = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_debug_draw_bounding_boxes_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Object::debug_draw_bounding_boxes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Object_GetID(void * jarg1) {
  unsigned long jresult ;
  Object *arg1 = (Object *) 0 ;
  unsigned long result;
  
  arg1 = (Object *)jarg1; 
  result = (unsigned long)((Object const *)arg1)->GetID();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_Init(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)(arg1)->Init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Shutdown(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Update(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_InitPhysics(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->InitPhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_PlayAnimation(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint)jarg2; 
  (arg1)->PlayAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetDrawBounds__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  ALLEGRO_COLOR arg3 ;
  ALLEGRO_COLOR *argp3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = (ALLEGRO_COLOR *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ALLEGRO_COLOR", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetDrawBounds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetDrawBounds__SWIG_1(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDrawBounds(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_FadeOut(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->FadeOut(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Draw(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Transform__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  Object *arg1 = (Object *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int temp4 ;
  int temp5 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  (arg1)->Transform(*arg2,*arg3,(int const &)*arg4,(int const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Transform__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  Object *arg1 = (Object *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int temp4 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  (arg1)->Transform(*arg2,*arg3,(int const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Transform__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->Transform(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_TransformRect(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  _Rect *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (_Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "_Rect & type is null", 0);
    return ;
  } 
  (arg1)->TransformRect(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetDisplayTime(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDisplayTime(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetDisplayTime(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)(arg1)->GetDisplayTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_DrawAtOffset__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  int arg3 ;
  Sprite *arg4 = (Sprite *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Sprite *)jarg4; 
  (arg1)->DrawAtOffset(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_DrawAtOffset__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->DrawAtOffset(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetPropX(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)((Object const *)arg1)->GetPropX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetPropY(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)((Object const *)arg1)->GetPropY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetXY(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  b2Vec2 result;
  
  arg1 = (Object *)jarg1; 
  result = ((Object const *)arg1)->GetXY();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetPropX(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPropX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetPropY(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPropY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetXY__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetXY(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetXY__SWIG_1(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetXY((b2Vec2 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetAlpha(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)(arg1)->GetAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetAlpha(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAlpha(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetFlipX(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFlipX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetFlipY(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFlipY(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetVelX(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetVelX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetVelY(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetVelY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetVelXY(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  b2Vec2 result;
  
  arg1 = (Object *)jarg1; 
  result = ((Object const *)arg1)->GetVelXY();
  jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetVelX(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVelX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetVelY(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVelY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetVelXY__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetVelXY(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetVelXY__SWIG_1(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetVelXY((b2Vec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetVelRotate(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVelRotate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetUseRotation(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUseRotation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetWidth(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)((Object const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_GetHeight(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)((Object const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_ResetForNextFrame(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->ResetForNextFrame();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetProperties(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  ObjectProperties result;
  
  arg1 = (Object *)jarg1; 
  result = ((Object const *)arg1)->GetProperties();
  jresult = new ObjectProperties((const ObjectProperties &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetProperties(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  ObjectProperties arg2 ;
  ObjectProperties *argp2 ;
  
  arg1 = (Object *)jarg1; 
  argp2 = (ObjectProperties *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ObjectProperties", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetProperties(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetControllerNum(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint)jarg2; 
  (arg1)->SetControllerNum(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_GetControllerNum(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  uint result;
  
  arg1 = (Object *)jarg1; 
  result = (uint)((Object const *)arg1)->GetControllerNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetDebugFlag(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDebugFlag(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_GetDebugFlag(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)((Object const *)arg1)->GetDebugFlag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_OnCollide(void * jarg1, void * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  Object *arg2 = (Object *) 0 ;
  b2WorldManifold *arg3 = (b2WorldManifold *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (b2WorldManifold *)jarg3; 
  (arg1)->OnCollide(arg2,(b2WorldManifold const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_OnAnimationLooped(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->OnAnimationLooped();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_IsDead(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)((Object const *)arg1)->IsDead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetIsDead(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsDead(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetLayer(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  ObjectLayer *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  result = (ObjectLayer *)((Object const *)arg1)->GetLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetLayer(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  ObjectLayer *arg2 = (ObjectLayer *) (ObjectLayer *)0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (ObjectLayer *)jarg2; 
  (arg1)->SetLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetObjectDefName(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetObjectDefName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Object_GetObjectDefName(void * jarg1) {
  char * jresult ;
  Object *arg1 = (Object *) 0 ;
  std::string result;
  
  arg1 = (Object *)jarg1; 
  result = (arg1)->GetObjectDefName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_ApplyImpulse__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->ApplyImpulse(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_ApplyImpulse__SWIG_1(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->ApplyImpulse((b2Vec2 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_FinishLoading(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)(arg1)->FinishLoading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Object(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_ContainsPoint(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  b2Vec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Object const *)arg1)->ContainsPoint((b2Vec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_ResetVolatileState(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  VolatileStateLevel arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (VolatileStateLevel)jarg2; 
  (arg1)->ResetVolatileState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_AddPrototype(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  Object *arg2 = (Object *) 0 ;
  Object *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (Object *)jarg2; 
  result = (Object *)Object::AddPrototype(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_CreateObject(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Object *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (Object *)Object::CreateObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_X_set(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  Object_X_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_X_get(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)Object_X_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Y_set(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  Object_Y_set(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_Y_get(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)Object_Y_get(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectPlayer_Clone(void * jarg1) {
  void * jresult ;
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  Object *result = 0 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  result = (Object *)((ObjectPlayer const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectPlayer_Init(void * jarg1) {
  unsigned int jresult ;
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  bool result;
  
  arg1 = (ObjectPlayer *)jarg1; 
  result = (bool)(arg1)->Init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectPlayer_Shutdown(void * jarg1) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectPlayer_Update(void * jarg1) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectPlayer_OnCollide(void * jarg1, void * jarg2, void * jarg3) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  Object *arg2 = (Object *) 0 ;
  b2WorldManifold *arg3 = (b2WorldManifold *) 0 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (b2WorldManifold *)jarg3; 
  (arg1)->OnCollide(arg2,(b2WorldManifold const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectPlayer_ResetVolatileState(void * jarg1, int jarg2) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  VolatileStateLevel arg2 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  arg2 = (VolatileStateLevel)jarg2; 
  (arg1)->ResetVolatileState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectPlayer_OnAnimationLooped(void * jarg1) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  (arg1)->OnAnimationLooped();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectPlayer_PlayAnimation(void * jarg1, unsigned int jarg2) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  uint arg2 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  arg2 = (uint)jarg2; 
  (arg1)->PlayAnimation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectPlayer_GetNumRings(void * jarg1) {
  int jresult ;
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  int result;
  
  arg1 = (ObjectPlayer *)jarg1; 
  result = (int)(arg1)->GetNumRings();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectPlayer() {
  void * jresult ;
  ObjectPlayer *result = 0 ;
  
  result = (ObjectPlayer *)new ObjectPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectPlayer(void * jarg1) {
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  
  arg1 = (ObjectPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectPlayer_WantsToSlideOnLeftSide(void * jarg1) {
  unsigned int jresult ;
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  bool result;
  
  arg1 = (ObjectPlayer *)jarg1; 
  result = (bool)(arg1)->WantsToSlideOnLeftSide();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectPlayer_WantsToSlideOnRightSide(void * jarg1) {
  unsigned int jresult ;
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  bool result;
  
  arg1 = (ObjectPlayer *)jarg1; 
  result = (bool)(arg1)->WantsToSlideOnRightSide();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectPlayer_WantsToSlideOnAnySide(void * jarg1) {
  unsigned int jresult ;
  ObjectPlayer *arg1 = (ObjectPlayer *) 0 ;
  bool result;
  
  arg1 = (ObjectPlayer *)jarg1; 
  result = (bool)(arg1)->WantsToSlideOnAnySide();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectFactory_GetInstance() {
  void * jresult ;
  ObjectFactory *result = 0 ;
  
  result = (ObjectFactory *)ObjectFactory::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectFactory_SetInstance(void * jarg1) {
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  ObjectFactory::SetInstance(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectFactory_CreateInstance() {
  ObjectFactory::CreateInstance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectFactory_FreeInstance() {
  ObjectFactory::FreeInstance();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectFactory_Init(void * jarg1) {
  int jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  int result;
  
  arg1 = (ObjectFactory *)jarg1; 
  result = (int)(arg1)->Init();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectFactory_Shutdown(void * jarg1) {
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ObjectFactory_GetClassNameFromXML(void * jarg1, void * jarg2) {
  char * jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  XMLNode *arg2 = 0 ;
  std::string result;
  
  arg1 = (ObjectFactory *)jarg1; 
  arg2 = (XMLNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XMLNode & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetClassNameFromXML(*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectFactory_CreateObjectFromXML(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  XMLNode *arg2 = 0 ;
  XMLNode *arg3 = (XMLNode *) 0 ;
  Object *result = 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  arg2 = (XMLNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XMLNode & type is null", 0);
    return 0;
  } 
  arg3 = (XMLNode *)jarg3; 
  result = (Object *)(arg1)->CreateObjectFromXML(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectFactory_CreateObject(void * jarg1, char * jarg2) {
  void * jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  std::string arg2 ;
  Object *result = 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (Object *)(arg1)->CreateObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectFactory_AddObjectDefinition(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  std::string *arg2 = 0 ;
  XMLNode *arg3 = 0 ;
  bool result;
  
  arg1 = (ObjectFactory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (XMLNode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XMLNode const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddObjectDefinition((std::string const &)*arg2,(XMLNode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectFactory_FindObjectDefinition(void * jarg1, char * jarg2) {
  void * jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  std::string *arg2 = 0 ;
  XMLNode *result = 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (XMLNode *)(arg1)->FindObjectDefinition((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectFactory_GetObjectDefinitionCount(void * jarg1) {
  int jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  int result;
  
  arg1 = (ObjectFactory *)jarg1; 
  result = (int)((ObjectFactory const *)arg1)->GetObjectDefinitionCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ObjectFactory_GetObjectDefinition(void * jarg1, int jarg2) {
  char * jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::string *) &((ObjectFactory const *)arg1)->GetObjectDefinition(arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectFactory_LoadObjectDefsFromXML(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  XMLNode *arg2 = 0 ;
  bool result;
  
  arg1 = (ObjectFactory *)jarg1; 
  arg2 = (XMLNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XMLNode & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadObjectDefsFromXML(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ObjectFactory_LoadObjectDefsFromIncludeXML(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (ObjectFactory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->LoadObjectDefsFromIncludeXML(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectFactory(void * jarg1) {
  ObjectFactory *arg1 = (ObjectFactory *) 0 ;
  
  arg1 = (ObjectFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegisterObjectPrototypes() {
  RegisterObjectPrototypes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorBaseUI_OnObjectsChanged(void * jarg1) {
  EditorBaseUI *arg1 = (EditorBaseUI *) 0 ;
  
  arg1 = (EditorBaseUI *)jarg1; 
  (arg1)->OnObjectsChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorBaseUI_OnObjectsChangedSwigExplicitEditorBaseUI(void * jarg1) {
  EditorBaseUI *arg1 = (EditorBaseUI *) 0 ;
  
  arg1 = (EditorBaseUI *)jarg1; 
  (arg1)->EditorBaseUI::OnObjectsChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorBaseUI_OnSelectionChanged(void * jarg1, void * jarg2) {
  EditorBaseUI *arg1 = (EditorBaseUI *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorBaseUI *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->OnSelectionChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorBaseUI_OnSelectionChangedSwigExplicitEditorBaseUI(void * jarg1, void * jarg2) {
  EditorBaseUI *arg1 = (EditorBaseUI *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorBaseUI *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->EditorBaseUI::OnSelectionChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorBaseUI(void * jarg1) {
  EditorBaseUI *arg1 = (EditorBaseUI *) 0 ;
  
  arg1 = (EditorBaseUI *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorBaseUI() {
  void * jresult ;
  EditorBaseUI *result = 0 ;
  
  result = (EditorBaseUI *)new SwigDirector_EditorBaseUI();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorBaseUI_director_connect(void *objarg, SwigDirector_EditorBaseUI::SWIG_Callback0_t callback0, SwigDirector_EditorBaseUI::SWIG_Callback1_t callback1) {
  EditorBaseUI *obj = (EditorBaseUI *)objarg;
  SwigDirector_EditorBaseUI *director = dynamic_cast<SwigDirector_EditorBaseUI *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Editor() {
  void * jresult ;
  Editor *result = 0 ;
  
  result = (Editor *)new Editor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Editor(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Editor_CreateObject(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Editor *arg1 = (Editor *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (Object *)(arg1)->CreateObject((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_CreateAndSelectObject(void * jarg1, char * jarg2, char * jarg3) {
  Editor *arg1 = (Editor *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->CreateAndSelectObject((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_CreateAndSelect_UsePreviousLayerAndObject(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->CreateAndSelect_UsePreviousLayerAndObject();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_MouseToLayerCoords(void * jarg1, void * jarg2, void * jarg3) {
  Editor *arg1 = (Editor *) 0 ;
  b2Vec2 *arg2 = 0 ;
  ObjectLayer *arg3 = (ObjectLayer *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 & type is null", 0);
    return ;
  } 
  arg3 = (ObjectLayer *)jarg3; 
  (arg1)->MouseToLayerCoords(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_SnapToGrid(void * jarg1, void * jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (b2Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "b2Vec2 & type is null", 0);
    return ;
  } 
  (arg1)->SnapToGrid(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_UpdateSelectedObjectPosition(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->UpdateSelectedObjectPosition();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_SelectObject(void * jarg1, void * jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->SelectObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_Draw(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->Draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_CommonUpdate(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->CommonUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_FlashText(void * jarg1, char * jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  std::string arg2 ;
  
  arg1 = (Editor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->FlashText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_NoModeUpdate(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->NoModeUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_ResetVolatileLevelState(void * jarg1, int jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  VolatileStateLevel arg2 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (VolatileStateLevel)jarg2; 
  (arg1)->ResetVolatileLevelState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_UpdateMove(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->UpdateMove();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Editor_GetObjectUnderCursor(void * jarg1) {
  void * jresult ;
  Editor *arg1 = (Editor *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Editor *)jarg1; 
  result = (Object *)(arg1)->GetObjectUnderCursor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_SetDrawBoundingBoxes_AllObjects(void * jarg1, unsigned int jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  bool arg2 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDrawBoundingBoxes_AllObjects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_Update(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_DeleteCurrentSelection(void * jarg1) {
  Editor *arg1 = (Editor *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  (arg1)->DeleteCurrentSelection();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Editor_GetPropSnapToGrid(void * jarg1) {
  unsigned int jresult ;
  Editor *arg1 = (Editor *) 0 ;
  bool result;
  
  arg1 = (Editor *)jarg1; 
  result = (bool)(arg1)->GetPropSnapToGrid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_SetPropSnapToGrid(void * jarg1, unsigned int jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  bool arg2 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPropSnapToGrid(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Editor_GetPropSelection(void * jarg1) {
  void * jresult ;
  Editor *arg1 = (Editor *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Editor *)jarg1; 
  result = (Object *)(arg1)->GetPropSelection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Editor_SetPropSelection(void * jarg1, void * jarg2) {
  Editor *arg1 = (Editor *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Editor *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->SetPropSelection(arg2);
}


SWIGEXPORT GameMode * SWIGSTDCALL CSharp_GameWorld_SWIGUpcast(GameWorld *jarg1) {
    return (GameMode *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_ObjectPlayer_SWIGUpcast(ObjectPlayer *jarg1) {
    return (Object *)jarg1;
}

#ifdef __cplusplus
}
#endif

