//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.9
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class GameModeExitInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameModeExitInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameModeExitInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameModeExitInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameModeExitInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool useExitInfo {
    set {
      enginePINVOKE.GameModeExitInfo_useExitInfo_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_useExitInfo_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string lastModeName {
    set {
      enginePINVOKE.GameModeExitInfo_lastModeName_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(enginePINVOKE.GameModeExitInfo_lastModeName_get(swigCPtr), true);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string nextModeToLoad {
    set {
      enginePINVOKE.GameModeExitInfo_nextModeToLoad_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(enginePINVOKE.GameModeExitInfo_nextModeToLoad_get(swigCPtr), true);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string lastPortalName {
    set {
      enginePINVOKE.GameModeExitInfo_lastPortalName_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(enginePINVOKE.GameModeExitInfo_lastPortalName_get(swigCPtr), true);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool useNextModeToLoad {
    set {
      enginePINVOKE.GameModeExitInfo_useNextModeToLoad_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_useNextModeToLoad_get(swigCPtr);
      return ret;
    } 
  }

  public bool useLastPortalName {
    set {
      enginePINVOKE.GameModeExitInfo_useLastPortalName_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_useLastPortalName_get(swigCPtr);
      return ret;
    } 
  }

  public bool showInitialText {
    set {
      enginePINVOKE.GameModeExitInfo_showInitialText_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_showInitialText_get(swigCPtr);
      return ret;
    } 
  }

  public GameModeExitInfo() : this(enginePINVOKE.new_GameModeExitInfo(), true) {
  }

}

public class GameMode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameMode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameMode() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual int Init(SWIGTYPE_p_XMLNode arg0) {
    int ret = enginePINVOKE.GameMode_Init(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(arg0));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Shutdown() {
    enginePINVOKE.GameMode_Shutdown(swigCPtr);
  }

  public virtual void Draw() {
    enginePINVOKE.GameMode_Draw(swigCPtr);
  }

  public virtual void Update() {
    enginePINVOKE.GameMode_Update(swigCPtr);
  }

  public virtual int GetAiFitnessScore() {
    int ret = enginePINVOKE.GameMode_GetAiFitnessScore(swigCPtr);
    return ret;
  }

  public void SetExitInfo(GameModeExitInfo info) {
    enginePINVOKE.GameMode_SetExitInfo(swigCPtr, GameModeExitInfo.getCPtr(info));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public GameModeExitInfo GetExitInfo() {
    GameModeExitInfo ret = new GameModeExitInfo(enginePINVOKE.GameMode_GetExitInfo(swigCPtr), false);
    return ret;
  }

  public void SetOldExitInfo(GameModeExitInfo info) {
    enginePINVOKE.GameMode_SetOldExitInfo(swigCPtr, GameModeExitInfo.getCPtr(info));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public GameModeExitInfo GetOldExitInfo() {
    GameModeExitInfo ret = new GameModeExitInfo(enginePINVOKE.GameMode_GetOldExitInfo(swigCPtr), false);
    return ret;
  }

}

public class GameWorld : GameMode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GameWorld(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.GameWorld_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameWorld() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GameWorld GetInstance() {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetInstance();
    GameWorld ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameWorld(cPtr, false);
    return ret;
  }

  public static void SetInstance(GameWorld c) {
    enginePINVOKE.GameWorld_SetInstance(GameWorld.getCPtr(c));
  }

  public static void CreateInstance() {
    enginePINVOKE.GameWorld_CreateInstance();
  }

  public static void FreeInstance() {
    enginePINVOKE.GameWorld_FreeInstance();
  }

  public override int Init(SWIGTYPE_p_XMLNode arg0) {
    int ret = enginePINVOKE.GameWorld_Init(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(arg0));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.GameWorld_Shutdown(swigCPtr);
  }

  public bool UseScrollSpeed() {
    bool ret = enginePINVOKE.GameWorld_UseScrollSpeed(swigCPtr);
    return ret;
  }

  public bool IsLoading() {
    bool ret = enginePINVOKE.GameWorld_IsLoading(swigCPtr);
    return ret;
  }

  public bool JumpedBackFromADoor() {
    bool ret = enginePINVOKE.GameWorld_JumpedBackFromADoor(swigCPtr);
    return ret;
  }

  public void SetModalObject(SWIGTYPE_p_Object obj) {
    enginePINVOKE.GameWorld_SetModalObject(swigCPtr, SWIGTYPE_p_Object.getCPtr(obj));
  }

  public void AddObject(SWIGTYPE_p_Object obj, bool addImmediately) {
    enginePINVOKE.GameWorld_AddObject__SWIG_0(swigCPtr, SWIGTYPE_p_Object.getCPtr(obj), addImmediately);
  }

  public void AddObject(SWIGTYPE_p_Object obj) {
    enginePINVOKE.GameWorld_AddObject__SWIG_1(swigCPtr, SWIGTYPE_p_Object.getCPtr(obj));
  }

  public SWIGTYPE_p_ObjectLayer FindLayer(string name) {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_FindLayer(swigCPtr, name);
    SWIGTYPE_p_ObjectLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ObjectLayer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_ObjectPlayer GetPlayer(SWIGTYPE_p_uint iIndex) {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetPlayer(swigCPtr, SWIGTYPE_p_uint.getCPtr(iIndex));
    SWIGTYPE_p_ObjectPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ObjectPlayer(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_uint GetNumPlayers() {
    SWIGTYPE_p_uint ret = new SWIGTYPE_p_uint(enginePINVOKE.GameWorld_GetNumPlayers(swigCPtr), true);
    return ret;
  }

  public override void Draw() {
    enginePINVOKE.GameWorld_Draw(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.GameWorld_Update(swigCPtr);
  }

  public void DoMainGameUpdate() {
    enginePINVOKE.GameWorld_DoMainGameUpdate(swigCPtr);
  }

  public static void CreateWorld(SWIGTYPE_p_string mode_filename) {
    enginePINVOKE.GameWorld_CreateWorld(SWIGTYPE_p_string.getCPtr(mode_filename));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetWidth() {
    int ret = enginePINVOKE.GameWorld_GetWidth(swigCPtr);
    return ret;
  }

  public int GetHeight() {
    int ret = enginePINVOKE.GameWorld_GetHeight(swigCPtr);
    return ret;
  }

  public void ComputeNewCamera() {
    enginePINVOKE.GameWorld_ComputeNewCamera(swigCPtr);
  }

  public void SetCameraScrollSpeed(float s) {
    enginePINVOKE.GameWorld_SetCameraScrollSpeed(swigCPtr, s);
  }

  public int GetCameraX() {
    int ret = enginePINVOKE.GameWorld_GetCameraX(swigCPtr);
    return ret;
  }

  public int GetCameraY() {
    int ret = enginePINVOKE.GameWorld_GetCameraY(swigCPtr);
    return ret;
  }

  public void SetCameraShake(bool state, int fade_out_time) {
    enginePINVOKE.GameWorld_SetCameraShake__SWIG_0(swigCPtr, state, fade_out_time);
  }

  public void SetCameraShake(bool state) {
    enginePINVOKE.GameWorld_SetCameraShake__SWIG_1(swigCPtr, state);
  }

  public void TransformWorldToView(SWIGTYPE_p_int x, SWIGTYPE_p_int y) {
    enginePINVOKE.GameWorld_TransformWorldToView(swigCPtr, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformViewToScreen(SWIGTYPE_p_int x, SWIGTYPE_p_int y) {
    enginePINVOKE.GameWorld_TransformViewToScreen(swigCPtr, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShowText(string txt, string avatar_filename, bool modal_active) {
    enginePINVOKE.GameWorld_ShowText__SWIG_0(swigCPtr, txt, avatar_filename, modal_active);
  }

  public void ShowText(string txt, string avatar_filename) {
    enginePINVOKE.GameWorld_ShowText__SWIG_1(swigCPtr, txt, avatar_filename);
  }

  public void ShowText(string txt) {
    enginePINVOKE.GameWorld_ShowText__SWIG_2(swigCPtr, txt);
  }

  public void SnapCamera() {
    enginePINVOKE.GameWorld_SnapCamera(swigCPtr);
  }

  public override int GetAiFitnessScore() {
    int ret = enginePINVOKE.GameWorld_GetAiFitnessScore(swigCPtr);
    return ret;
  }

  public void AllowPlayerOffscreen(bool state) {
    enginePINVOKE.GameWorld_AllowPlayerOffscreen(swigCPtr, state);
  }

  public bool PlayerAllowedOffscreen() {
    bool ret = enginePINVOKE.GameWorld_PlayerAllowedOffscreen(swigCPtr);
    return ret;
  }

  public void SaveWorld(SWIGTYPE_p_string filename) {
    enginePINVOKE.GameWorld_SaveWorld__SWIG_0(swigCPtr, SWIGTYPE_p_string.getCPtr(filename));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveWorld() {
    enginePINVOKE.GameWorld_SaveWorld__SWIG_1(swigCPtr);
  }

}

public class GameState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameState() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static GameState GetInstance() {
    global::System.IntPtr cPtr = enginePINVOKE.GameState_GetInstance();
    GameState ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameState(cPtr, false);
    return ret;
  }

  public static void SetInstance(GameState c) {
    enginePINVOKE.GameState_SetInstance(GameState.getCPtr(c));
  }

  public static void CreateInstance() {
    enginePINVOKE.GameState_CreateInstance();
  }

  public static void FreeInstance() {
    enginePINVOKE.GameState_FreeInstance();
  }

  public void Shutdown() {
    enginePINVOKE.GameState_Shutdown(swigCPtr);
  }

  public bool Init(int argc, SWIGTYPE_p_p_char argv) {
    bool ret = enginePINVOKE.GameState_Init(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    return ret;
  }

  public void RunMainLoop_BlockingHelper() {
    enginePINVOKE.GameState_RunMainLoop_BlockingHelper(swigCPtr);
  }

  public void ProcessEvents() {
    enginePINVOKE.GameState_ProcessEvents(swigCPtr);
  }

  public void TickIfNeeded() {
    enginePINVOKE.GameState_TickIfNeeded(swigCPtr);
  }

  public void Tick() {
    enginePINVOKE.GameState_Tick(swigCPtr);
  }

  public void UpdateDebugPausing() {
    enginePINVOKE.GameState_UpdateDebugPausing(swigCPtr);
  }

  public void SetRandomSeed(int arg0) {
    enginePINVOKE.GameState_SetRandomSeed(swigCPtr, arg0);
  }

  public int GetRandomSeed() {
    int ret = enginePINVOKE.GameState_GetRandomSeed(swigCPtr);
    return ret;
  }

  public bool IsPlayingBackDemo() {
    bool ret = enginePINVOKE.GameState_IsPlayingBackDemo(swigCPtr);
    return ret;
  }

  public void SignalGameExit() {
    enginePINVOKE.GameState_SignalGameExit(swigCPtr);
  }

  public void SignalEndCurrentMode() {
    enginePINVOKE.GameState_SignalEndCurrentMode(swigCPtr);
  }

  public bool ShouldExit() {
    bool ret = enginePINVOKE.GameState_ShouldExit(swigCPtr);
    return ret;
  }

}

public class Shape : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Shape(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Shape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Shape() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_Shape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double x {
    set {
      enginePINVOKE.Shape_x_set(swigCPtr, value);
    } 
    get {
      double ret = enginePINVOKE.Shape_x_get(swigCPtr);
      return ret;
    } 
  }

  public double y {
    set {
      enginePINVOKE.Shape_y_set(swigCPtr, value);
    } 
    get {
      double ret = enginePINVOKE.Shape_y_get(swigCPtr);
      return ret;
    } 
  }

  public void move(double dx, double dy) {
    enginePINVOKE.Shape_move(swigCPtr, dx, dy);
  }

  public virtual double area() {
    double ret = enginePINVOKE.Shape_area(swigCPtr);
    return ret;
  }

  public virtual double perimeter() {
    double ret = enginePINVOKE.Shape_perimeter(swigCPtr);
    return ret;
  }

  public static int nshapes {
    set {
      enginePINVOKE.Shape_nshapes_set(value);
    } 
    get {
      int ret = enginePINVOKE.Shape_nshapes_get();
      return ret;
    } 
  }

}

public class Circle : Shape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Circle(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.Circle_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Circle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Circle() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_Circle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Circle(double r) : this(enginePINVOKE.new_Circle(r), true) {
  }

  public override double area() {
    double ret = enginePINVOKE.Circle_area(swigCPtr);
    return ret;
  }

  public override double perimeter() {
    double ret = enginePINVOKE.Circle_perimeter(swigCPtr);
    return ret;
  }

}

public class Square : Shape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Square(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.Square_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Square obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Square() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_Square(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Square(double w) : this(enginePINVOKE.new_Square(w), true) {
  }

  public override double area() {
    double ret = enginePINVOKE.Square_area(swigCPtr);
    return ret;
  }

  public override double perimeter() {
    double ret = enginePINVOKE.Square_perimeter(swigCPtr);
    return ret;
  }

}

class enginePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="SWIGRegisterExceptionCallbacks_engine")]
    public static extern void SWIGRegisterExceptionCallbacks_engine(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_engine")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_engine(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_engine(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_engine(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(enginePINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(enginePINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="SWIGRegisterStringCallback_engine")]
    public static extern void SWIGRegisterStringCallback_engine(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_engine(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static enginePINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useExitInfo_set")]
  public static extern void GameModeExitInfo_useExitInfo_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useExitInfo_get")]
  public static extern bool GameModeExitInfo_useExitInfo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastModeName_set")]
  public static extern void GameModeExitInfo_lastModeName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastModeName_get")]
  public static extern global::System.IntPtr GameModeExitInfo_lastModeName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_nextModeToLoad_set")]
  public static extern void GameModeExitInfo_nextModeToLoad_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_nextModeToLoad_get")]
  public static extern global::System.IntPtr GameModeExitInfo_nextModeToLoad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastPortalName_set")]
  public static extern void GameModeExitInfo_lastPortalName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastPortalName_get")]
  public static extern global::System.IntPtr GameModeExitInfo_lastPortalName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useNextModeToLoad_set")]
  public static extern void GameModeExitInfo_useNextModeToLoad_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useNextModeToLoad_get")]
  public static extern bool GameModeExitInfo_useNextModeToLoad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useLastPortalName_set")]
  public static extern void GameModeExitInfo_useLastPortalName_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useLastPortalName_get")]
  public static extern bool GameModeExitInfo_useLastPortalName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_showInitialText_set")]
  public static extern void GameModeExitInfo_showInitialText_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_showInitialText_get")]
  public static extern bool GameModeExitInfo_showInitialText_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_GameModeExitInfo")]
  public static extern global::System.IntPtr new_GameModeExitInfo();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameModeExitInfo")]
  public static extern void delete_GameModeExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Init")]
  public static extern int GameMode_Init(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Shutdown")]
  public static extern void GameMode_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Draw")]
  public static extern void GameMode_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Update")]
  public static extern void GameMode_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_GetAiFitnessScore")]
  public static extern int GameMode_GetAiFitnessScore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_SetExitInfo")]
  public static extern void GameMode_SetExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_GetExitInfo")]
  public static extern global::System.IntPtr GameMode_GetExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_SetOldExitInfo")]
  public static extern void GameMode_SetOldExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_GetOldExitInfo")]
  public static extern global::System.IntPtr GameMode_GetOldExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameMode")]
  public static extern void delete_GameMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetInstance")]
  public static extern global::System.IntPtr GameWorld_GetInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetInstance")]
  public static extern void GameWorld_SetInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_CreateInstance")]
  public static extern void GameWorld_CreateInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_FreeInstance")]
  public static extern void GameWorld_FreeInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Init")]
  public static extern int GameWorld_Init(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Shutdown")]
  public static extern void GameWorld_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_UseScrollSpeed")]
  public static extern bool GameWorld_UseScrollSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_IsLoading")]
  public static extern bool GameWorld_IsLoading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_JumpedBackFromADoor")]
  public static extern bool GameWorld_JumpedBackFromADoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetModalObject")]
  public static extern void GameWorld_SetModalObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_AddObject__SWIG_0")]
  public static extern void GameWorld_AddObject__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_AddObject__SWIG_1")]
  public static extern void GameWorld_AddObject__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_FindLayer")]
  public static extern global::System.IntPtr GameWorld_FindLayer(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetPlayer")]
  public static extern global::System.IntPtr GameWorld_GetPlayer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetNumPlayers")]
  public static extern global::System.IntPtr GameWorld_GetNumPlayers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Draw")]
  public static extern void GameWorld_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Update")]
  public static extern void GameWorld_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_DoMainGameUpdate")]
  public static extern void GameWorld_DoMainGameUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_CreateWorld")]
  public static extern void GameWorld_CreateWorld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetWidth")]
  public static extern int GameWorld_GetWidth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetHeight")]
  public static extern int GameWorld_GetHeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ComputeNewCamera")]
  public static extern void GameWorld_ComputeNewCamera(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetCameraScrollSpeed")]
  public static extern void GameWorld_SetCameraScrollSpeed(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetCameraX")]
  public static extern int GameWorld_GetCameraX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetCameraY")]
  public static extern int GameWorld_GetCameraY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetCameraShake__SWIG_0")]
  public static extern void GameWorld_SetCameraShake__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetCameraShake__SWIG_1")]
  public static extern void GameWorld_SetCameraShake__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_TransformWorldToView")]
  public static extern void GameWorld_TransformWorldToView(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_TransformViewToScreen")]
  public static extern void GameWorld_TransformViewToScreen(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ShowText__SWIG_0")]
  public static extern void GameWorld_ShowText__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ShowText__SWIG_1")]
  public static extern void GameWorld_ShowText__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ShowText__SWIG_2")]
  public static extern void GameWorld_ShowText__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SnapCamera")]
  public static extern void GameWorld_SnapCamera(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetAiFitnessScore")]
  public static extern int GameWorld_GetAiFitnessScore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_AllowPlayerOffscreen")]
  public static extern void GameWorld_AllowPlayerOffscreen(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_PlayerAllowedOffscreen")]
  public static extern bool GameWorld_PlayerAllowedOffscreen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SaveWorld__SWIG_0")]
  public static extern void GameWorld_SaveWorld__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SaveWorld__SWIG_1")]
  public static extern void GameWorld_SaveWorld__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameWorld")]
  public static extern void delete_GameWorld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_GetInstance")]
  public static extern global::System.IntPtr GameState_GetInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SetInstance")]
  public static extern void GameState_SetInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_CreateInstance")]
  public static extern void GameState_CreateInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_FreeInstance")]
  public static extern void GameState_FreeInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_Shutdown")]
  public static extern void GameState_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_Init")]
  public static extern bool GameState_Init(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_RunMainLoop_BlockingHelper")]
  public static extern void GameState_RunMainLoop_BlockingHelper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_ProcessEvents")]
  public static extern void GameState_ProcessEvents(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_TickIfNeeded")]
  public static extern void GameState_TickIfNeeded(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_Tick")]
  public static extern void GameState_Tick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_UpdateDebugPausing")]
  public static extern void GameState_UpdateDebugPausing(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SetRandomSeed")]
  public static extern void GameState_SetRandomSeed(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_GetRandomSeed")]
  public static extern int GameState_GetRandomSeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_IsPlayingBackDemo")]
  public static extern bool GameState_IsPlayingBackDemo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SignalGameExit")]
  public static extern void GameState_SignalGameExit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SignalEndCurrentMode")]
  public static extern void GameState_SignalEndCurrentMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_ShouldExit")]
  public static extern bool GameState_ShouldExit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameState")]
  public static extern void delete_GameState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_Shape")]
  public static extern void delete_Shape(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_x_set")]
  public static extern void Shape_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_x_get")]
  public static extern double Shape_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_y_set")]
  public static extern void Shape_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_y_get")]
  public static extern double Shape_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_move")]
  public static extern void Shape_move(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_area")]
  public static extern double Shape_area(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_perimeter")]
  public static extern double Shape_perimeter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_nshapes_set")]
  public static extern void Shape_nshapes_set(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Shape_nshapes_get")]
  public static extern int Shape_nshapes_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_Circle")]
  public static extern global::System.IntPtr new_Circle(double jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Circle_area")]
  public static extern double Circle_area(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Circle_perimeter")]
  public static extern double Circle_perimeter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_Circle")]
  public static extern void delete_Circle(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_Square")]
  public static extern global::System.IntPtr new_Square(double jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Square_area")]
  public static extern double Square_area(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Square_perimeter")]
  public static extern double Square_perimeter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_Square")]
  public static extern void delete_Square(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SWIGUpcast")]
  public static extern global::System.IntPtr GameWorld_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Circle_SWIGUpcast")]
  public static extern global::System.IntPtr Circle_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Square_SWIGUpcast")]
  public static extern global::System.IntPtr Square_SWIGUpcast(global::System.IntPtr jarg1);
}

public class engine {
}

public class SWIGTYPE_p_uint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_uint(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_uint() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_uint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_XMLNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_XMLNode(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_XMLNode() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_XMLNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Object(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Object() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Object obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ObjectLayer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ObjectLayer(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ObjectLayer() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ObjectLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ObjectPlayer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ObjectPlayer(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ObjectPlayer() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ObjectPlayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}
