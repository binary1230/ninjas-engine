//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.9
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ObjectVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<Object>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ObjectVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ObjectVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Object element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public Object this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(Object[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(Object[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, Object[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<Object> global::System.Collections.Generic.IEnumerable<Object>.GetEnumerator() {
    return new ObjectVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new ObjectVectorEnumerator(this);
  }

  public ObjectVectorEnumerator GetEnumerator() {
    return new ObjectVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class ObjectVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<Object>
  {
    private ObjectVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public ObjectVectorEnumerator(ObjectVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public Object Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (Object)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    enginePINVOKE.ObjectVector_Clear(swigCPtr);
  }

  public void Add(Object x) {
    enginePINVOKE.ObjectVector_Add(swigCPtr, Object.getCPtr(x));
  }

  private uint size() {
    uint ret = enginePINVOKE.ObjectVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = enginePINVOKE.ObjectVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    enginePINVOKE.ObjectVector_reserve(swigCPtr, n);
  }

  public ObjectVector() : this(enginePINVOKE.new_ObjectVector__SWIG_0(), true) {
  }

  public ObjectVector(ObjectVector other) : this(enginePINVOKE.new_ObjectVector__SWIG_1(ObjectVector.getCPtr(other)), true) {
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ObjectVector(int capacity) : this(enginePINVOKE.new_ObjectVector__SWIG_2(capacity), true) {
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  private Object getitemcopy(int index) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectVector_getitemcopy(swigCPtr, index);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private Object getitem(int index) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectVector_getitem(swigCPtr, index);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, Object val) {
    enginePINVOKE.ObjectVector_setitem(swigCPtr, index, Object.getCPtr(val));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(ObjectVector values) {
    enginePINVOKE.ObjectVector_AddRange(swigCPtr, ObjectVector.getCPtr(values));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ObjectVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectVector_GetRange(swigCPtr, index, count);
    ObjectVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectVector(cPtr, true);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, Object x) {
    enginePINVOKE.ObjectVector_Insert(swigCPtr, index, Object.getCPtr(x));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, ObjectVector values) {
    enginePINVOKE.ObjectVector_InsertRange(swigCPtr, index, ObjectVector.getCPtr(values));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    enginePINVOKE.ObjectVector_RemoveAt(swigCPtr, index);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    enginePINVOKE.ObjectVector_RemoveRange(swigCPtr, index, count);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ObjectVector Repeat(Object value, int count) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectVector_Repeat(Object.getCPtr(value), count);
    ObjectVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectVector(cPtr, true);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    enginePINVOKE.ObjectVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    enginePINVOKE.ObjectVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, ObjectVector values) {
    enginePINVOKE.ObjectVector_SetRange(swigCPtr, index, ObjectVector.getCPtr(values));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(Object value) {
    bool ret = enginePINVOKE.ObjectVector_Contains(swigCPtr, Object.getCPtr(value));
    return ret;
  }

  public int IndexOf(Object value) {
    int ret = enginePINVOKE.ObjectVector_IndexOf(swigCPtr, Object.getCPtr(value));
    return ret;
  }

  public int LastIndexOf(Object value) {
    int ret = enginePINVOKE.ObjectVector_LastIndexOf(swigCPtr, Object.getCPtr(value));
    return ret;
  }

  public bool Remove(Object value) {
    bool ret = enginePINVOKE.ObjectVector_Remove(swigCPtr, Object.getCPtr(value));
    return ret;
  }

}

public class ObjectLayerVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<ObjectLayer>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ObjectLayerVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectLayerVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectLayerVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectLayerVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ObjectLayerVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (ObjectLayer element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public ObjectLayer this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(ObjectLayer[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(ObjectLayer[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, ObjectLayer[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<ObjectLayer> global::System.Collections.Generic.IEnumerable<ObjectLayer>.GetEnumerator() {
    return new ObjectLayerVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new ObjectLayerVectorEnumerator(this);
  }

  public ObjectLayerVectorEnumerator GetEnumerator() {
    return new ObjectLayerVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class ObjectLayerVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<ObjectLayer>
  {
    private ObjectLayerVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public ObjectLayerVectorEnumerator(ObjectLayerVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public ObjectLayer Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (ObjectLayer)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    enginePINVOKE.ObjectLayerVector_Clear(swigCPtr);
  }

  public void Add(ObjectLayer x) {
    enginePINVOKE.ObjectLayerVector_Add(swigCPtr, ObjectLayer.getCPtr(x));
  }

  private uint size() {
    uint ret = enginePINVOKE.ObjectLayerVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = enginePINVOKE.ObjectLayerVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    enginePINVOKE.ObjectLayerVector_reserve(swigCPtr, n);
  }

  public ObjectLayerVector() : this(enginePINVOKE.new_ObjectLayerVector__SWIG_0(), true) {
  }

  public ObjectLayerVector(ObjectLayerVector other) : this(enginePINVOKE.new_ObjectLayerVector__SWIG_1(ObjectLayerVector.getCPtr(other)), true) {
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ObjectLayerVector(int capacity) : this(enginePINVOKE.new_ObjectLayerVector__SWIG_2(capacity), true) {
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  private ObjectLayer getitemcopy(int index) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectLayerVector_getitemcopy(swigCPtr, index);
    ObjectLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectLayer(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private ObjectLayer getitem(int index) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectLayerVector_getitem(swigCPtr, index);
    ObjectLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectLayer(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, ObjectLayer val) {
    enginePINVOKE.ObjectLayerVector_setitem(swigCPtr, index, ObjectLayer.getCPtr(val));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(ObjectLayerVector values) {
    enginePINVOKE.ObjectLayerVector_AddRange(swigCPtr, ObjectLayerVector.getCPtr(values));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ObjectLayerVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectLayerVector_GetRange(swigCPtr, index, count);
    ObjectLayerVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectLayerVector(cPtr, true);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, ObjectLayer x) {
    enginePINVOKE.ObjectLayerVector_Insert(swigCPtr, index, ObjectLayer.getCPtr(x));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, ObjectLayerVector values) {
    enginePINVOKE.ObjectLayerVector_InsertRange(swigCPtr, index, ObjectLayerVector.getCPtr(values));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    enginePINVOKE.ObjectLayerVector_RemoveAt(swigCPtr, index);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    enginePINVOKE.ObjectLayerVector_RemoveRange(swigCPtr, index, count);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ObjectLayerVector Repeat(ObjectLayer value, int count) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectLayerVector_Repeat(ObjectLayer.getCPtr(value), count);
    ObjectLayerVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectLayerVector(cPtr, true);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    enginePINVOKE.ObjectLayerVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    enginePINVOKE.ObjectLayerVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, ObjectLayerVector values) {
    enginePINVOKE.ObjectLayerVector_SetRange(swigCPtr, index, ObjectLayerVector.getCPtr(values));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(ObjectLayer value) {
    bool ret = enginePINVOKE.ObjectLayerVector_Contains(swigCPtr, ObjectLayer.getCPtr(value));
    return ret;
  }

  public int IndexOf(ObjectLayer value) {
    int ret = enginePINVOKE.ObjectLayerVector_IndexOf(swigCPtr, ObjectLayer.getCPtr(value));
    return ret;
  }

  public int LastIndexOf(ObjectLayer value) {
    int ret = enginePINVOKE.ObjectLayerVector_LastIndexOf(swigCPtr, ObjectLayer.getCPtr(value));
    return ret;
  }

  public bool Remove(ObjectLayer value) {
    bool ret = enginePINVOKE.ObjectLayerVector_Remove(swigCPtr, ObjectLayer.getCPtr(value));
    return ret;
  }

}

public class GameOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameOptions() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static GameOptions GetInstance() {
    global::System.IntPtr cPtr = enginePINVOKE.GameOptions_GetInstance();
    GameOptions ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameOptions(cPtr, false);
    return ret;
  }

  public static void SetInstance(GameOptions c) {
    enginePINVOKE.GameOptions_SetInstance(GameOptions.getCPtr(c));
  }

  public static void CreateInstance() {
    enginePINVOKE.GameOptions_CreateInstance();
  }

  public static void FreeInstance() {
    enginePINVOKE.GameOptions_FreeInstance();
  }

  public bool GetPropMapEditorEnabled() {
    bool ret = enginePINVOKE.GameOptions_GetPropMapEditorEnabled(swigCPtr);
    return ret;
  }

  public void SetPropMapEditorEnabled(bool val) {
    enginePINVOKE.GameOptions_SetPropMapEditorEnabled(swigCPtr, val);
  }

  public string GetPropFirstMode() {
    string ret = enginePINVOKE.GameOptions_GetPropFirstMode(swigCPtr);
    return ret;
  }

  public void SetPropFirstMode(string val) {
    enginePINVOKE.GameOptions_SetPropFirstMode(swigCPtr, val);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void PrintOptions(string arg0) {
    enginePINVOKE.GameOptions_PrintOptions(swigCPtr, arg0);
  }

  public void PrintBanner() {
    enginePINVOKE.GameOptions_PrintBanner(swigCPtr);
  }

  public bool ParseArguments(int argc, SWIGTYPE_p_p_char argv) {
    bool ret = enginePINVOKE.GameOptions_ParseArguments(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    return ret;
  }

  public bool IsValid() {
    bool ret = enginePINVOKE.GameOptions_IsValid(swigCPtr);
    return ret;
  }

  public void Clear() {
    enginePINVOKE.GameOptions_Clear(swigCPtr);
  }

  public bool IsFullscreen() {
    bool ret = enginePINVOKE.GameOptions_IsFullscreen(swigCPtr);
    return ret;
  }

  public string GetDemoFilename() {
    string ret = enginePINVOKE.GameOptions_GetDemoFilename(swigCPtr);
    return ret;
  }

  public bool RecordDemo() {
    bool ret = enginePINVOKE.GameOptions_RecordDemo(swigCPtr);
    return ret;
  }

  public bool PlaybackDemo() {
    bool ret = enginePINVOKE.GameOptions_PlaybackDemo(swigCPtr);
    return ret;
  }

  public string GetFirstModeOverride() {
    string ret = enginePINVOKE.GameOptions_GetFirstModeOverride(swigCPtr);
    return ret;
  }

  public bool SoundEnabled() {
    bool ret = enginePINVOKE.GameOptions_SoundEnabled(swigCPtr);
    return ret;
  }

  public bool GetDebugStartPaused() {
    bool ret = enginePINVOKE.GameOptions_GetDebugStartPaused(swigCPtr);
    return ret;
  }

  public int GetDebugMessageLevel() {
    int ret = enginePINVOKE.GameOptions_GetDebugMessageLevel(swigCPtr);
    return ret;
  }

  public bool DrawGraphics() {
    bool ret = enginePINVOKE.GameOptions_DrawGraphics(swigCPtr);
    return ret;
  }

  public bool WaitForUpdates() {
    bool ret = enginePINVOKE.GameOptions_WaitForUpdates(swigCPtr);
    return ret;
  }

}

public class GameModeExitInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameModeExitInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameModeExitInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameModeExitInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameModeExitInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool useExitInfo {
    set {
      enginePINVOKE.GameModeExitInfo_useExitInfo_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_useExitInfo_get(swigCPtr);
      return ret;
    } 
  }

  public string lastModeName {
    set {
      enginePINVOKE.GameModeExitInfo_lastModeName_set(swigCPtr, value);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = enginePINVOKE.GameModeExitInfo_lastModeName_get(swigCPtr);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string nextModeToLoad {
    set {
      enginePINVOKE.GameModeExitInfo_nextModeToLoad_set(swigCPtr, value);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = enginePINVOKE.GameModeExitInfo_nextModeToLoad_get(swigCPtr);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string lastPortalName {
    set {
      enginePINVOKE.GameModeExitInfo_lastPortalName_set(swigCPtr, value);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = enginePINVOKE.GameModeExitInfo_lastPortalName_get(swigCPtr);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool useNextModeToLoad {
    set {
      enginePINVOKE.GameModeExitInfo_useNextModeToLoad_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_useNextModeToLoad_get(swigCPtr);
      return ret;
    } 
  }

  public bool useLastPortalName {
    set {
      enginePINVOKE.GameModeExitInfo_useLastPortalName_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_useLastPortalName_get(swigCPtr);
      return ret;
    } 
  }

  public bool showInitialText {
    set {
      enginePINVOKE.GameModeExitInfo_showInitialText_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.GameModeExitInfo_showInitialText_get(swigCPtr);
      return ret;
    } 
  }

  public GameModeExitInfo() : this(enginePINVOKE.new_GameModeExitInfo(), true) {
  }

}

public class GameMode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameMode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameMode() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual int Init(SWIGTYPE_p_XMLNode arg0) {
    int ret = enginePINVOKE.GameMode_Init(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(arg0));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Shutdown() {
    enginePINVOKE.GameMode_Shutdown(swigCPtr);
  }

  public virtual void Draw() {
    enginePINVOKE.GameMode_Draw(swigCPtr);
  }

  public virtual void Update() {
    enginePINVOKE.GameMode_Update(swigCPtr);
  }

  public void SetExitInfo(GameModeExitInfo info) {
    enginePINVOKE.GameMode_SetExitInfo(swigCPtr, GameModeExitInfo.getCPtr(info));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public GameModeExitInfo GetExitInfo() {
    GameModeExitInfo ret = new GameModeExitInfo(enginePINVOKE.GameMode_GetExitInfo(swigCPtr), false);
    return ret;
  }

  public void SetOldExitInfo(GameModeExitInfo info) {
    enginePINVOKE.GameMode_SetOldExitInfo(swigCPtr, GameModeExitInfo.getCPtr(info));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public GameModeExitInfo GetOldExitInfo() {
    GameModeExitInfo ret = new GameModeExitInfo(enginePINVOKE.GameMode_GetOldExitInfo(swigCPtr), false);
    return ret;
  }

}

public class GameWorld : GameMode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GameWorld(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.GameWorld_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameWorld() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static GameWorld GetInstance() {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetInstance();
    GameWorld ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameWorld(cPtr, false);
    return ret;
  }

  public static void SetInstance(GameWorld c) {
    enginePINVOKE.GameWorld_SetInstance(GameWorld.getCPtr(c));
  }

  public static void CreateInstance() {
    enginePINVOKE.GameWorld_CreateInstance();
  }

  public static void FreeInstance() {
    enginePINVOKE.GameWorld_FreeInstance();
  }

  public bool GetPropAllowExiting() {
    bool ret = enginePINVOKE.GameWorld_GetPropAllowExiting(swigCPtr);
    return ret;
  }

  public void SetPropAllowExiting(bool val) {
    enginePINVOKE.GameWorld_SetPropAllowExiting(swigCPtr, val);
  }

  public SWIGTYPE_p_Camera _camera {
    set {
      enginePINVOKE.GameWorld__camera_set(swigCPtr, SWIGTYPE_p_Camera.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = enginePINVOKE.GameWorld__camera_get(swigCPtr);
      SWIGTYPE_p_Camera ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Camera(cPtr, false);
      return ret;
    } 
  }

  public Object m_pkCameraLookatTarget {
    set {
      enginePINVOKE.GameWorld_m_pkCameraLookatTarget_set(swigCPtr, Object.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = enginePINVOKE.GameWorld_m_pkCameraLookatTarget_get(swigCPtr);
      Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
      return ret;
    } 
  }

  public ObjectVector GetObjects() {
    ObjectVector ret = new ObjectVector(enginePINVOKE.GameWorld_GetObjects(swigCPtr), true);
    return ret;
  }

  public override int Init(SWIGTYPE_p_XMLNode xMode) {
    int ret = enginePINVOKE.GameWorld_Init(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xMode));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.GameWorld_Shutdown(swigCPtr);
  }

  public Editor GetEditor() {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetEditor(swigCPtr);
    Editor ret = (cPtr == global::System.IntPtr.Zero) ? null : new Editor(cPtr, false);
    return ret;
  }

  public bool IsLoading() {
    bool ret = enginePINVOKE.GameWorld_IsLoading(swigCPtr);
    return ret;
  }

  public bool JumpedBackFromADoor() {
    bool ret = enginePINVOKE.GameWorld_JumpedBackFromADoor(swigCPtr);
    return ret;
  }

  public void SetModalObject(Object obj) {
    enginePINVOKE.GameWorld_SetModalObject(swigCPtr, Object.getCPtr(obj));
  }

  public void AddObject(Object obj, bool addImmediately) {
    enginePINVOKE.GameWorld_AddObject__SWIG_0(swigCPtr, Object.getCPtr(obj), addImmediately);
  }

  public void AddObject(Object obj) {
    enginePINVOKE.GameWorld_AddObject__SWIG_1(swigCPtr, Object.getCPtr(obj));
  }

  public ObjectLayer FindLayer(string name) {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_FindLayer(swigCPtr, name);
    ObjectLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectLayer(cPtr, false);
    return ret;
  }

  public ObjectLayerVector GetLayers() {
    ObjectLayerVector ret = new ObjectLayerVector(enginePINVOKE.GameWorld_GetLayers(swigCPtr), true);
    return ret;
  }

  public ObjectPlayer GetPlayer(uint iIndex) {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetPlayer(swigCPtr, iIndex);
    ObjectPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectPlayer(cPtr, false);
    return ret;
  }

  public uint GetNumPlayers() {
    uint ret = enginePINVOKE.GameWorld_GetNumPlayers(swigCPtr);
    return ret;
  }

  public override void Draw() {
    enginePINVOKE.GameWorld_Draw(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.GameWorld_Update(swigCPtr);
  }

  public void DoMainGameUpdate() {
    enginePINVOKE.GameWorld_DoMainGameUpdate(swigCPtr);
  }

  public void SaveWorldOverCurrentFile() {
    enginePINVOKE.GameWorld_SaveWorldOverCurrentFile(swigCPtr);
  }

  public static GameWorld CreateWorld(string mode_filename) {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_CreateWorld(mode_filename);
    GameWorld ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameWorld(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetWidth() {
    int ret = enginePINVOKE.GameWorld_GetWidth(swigCPtr);
    return ret;
  }

  public int GetHeight() {
    int ret = enginePINVOKE.GameWorld_GetHeight(swigCPtr);
    return ret;
  }

  public void SetCameraShake(bool state, int fade_out_time) {
    enginePINVOKE.GameWorld_SetCameraShake__SWIG_0(swigCPtr, state, fade_out_time);
  }

  public void SetCameraShake(bool state) {
    enginePINVOKE.GameWorld_SetCameraShake__SWIG_1(swigCPtr, state);
  }

  public void TransformWorldToView(SWIGTYPE_p_float x, SWIGTYPE_p_float y, float scroll_speed_multiplier) {
    enginePINVOKE.GameWorld_TransformWorldToView(swigCPtr, SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y), scroll_speed_multiplier);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformViewToScreen(SWIGTYPE_p_float x, SWIGTYPE_p_float y) {
    enginePINVOKE.GameWorld_TransformViewToScreen(swigCPtr, SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_CameraFollow GetPlayerCamera() {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetPlayerCamera(swigCPtr);
    SWIGTYPE_p_CameraFollow ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CameraFollow(cPtr, false);
    return ret;
  }

  public void ShowText(string txt, string avatar_filename, bool modal_active) {
    enginePINVOKE.GameWorld_ShowText__SWIG_0(swigCPtr, txt, avatar_filename, modal_active);
  }

  public void ShowText(string txt, string avatar_filename) {
    enginePINVOKE.GameWorld_ShowText__SWIG_1(swigCPtr, txt, avatar_filename);
  }

  public void ShowText(string txt) {
    enginePINVOKE.GameWorld_ShowText__SWIG_2(swigCPtr, txt);
  }

  public Object FindObjectByID(uint id) {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_FindObjectByID(swigCPtr, id);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Camera GetCamera() {
    global::System.IntPtr cPtr = enginePINVOKE.GameWorld_GetCamera(swigCPtr);
    SWIGTYPE_p_Camera ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Camera(cPtr, false);
    return ret;
  }

  public void AllowPlayerOffscreen(bool state) {
    enginePINVOKE.GameWorld_AllowPlayerOffscreen(swigCPtr, state);
  }

  public bool PlayerAllowedOffscreen() {
    bool ret = enginePINVOKE.GameWorld_PlayerAllowedOffscreen(swigCPtr);
    return ret;
  }

  public void SaveWorld(string filename) {
    enginePINVOKE.GameWorld_SaveWorld__SWIG_0(swigCPtr, filename);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SaveWorld() {
    enginePINVOKE.GameWorld_SaveWorld__SWIG_1(swigCPtr);
  }

}

public class GameState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameState() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_GameState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static GameState GetInstance() {
    global::System.IntPtr cPtr = enginePINVOKE.GameState_GetInstance();
    GameState ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameState(cPtr, false);
    return ret;
  }

  public static void SetInstance(GameState c) {
    enginePINVOKE.GameState_SetInstance(GameState.getCPtr(c));
  }

  public static void CreateInstance() {
    enginePINVOKE.GameState_CreateInstance();
  }

  public static void FreeInstance() {
    enginePINVOKE.GameState_FreeInstance();
  }

  public void Shutdown() {
    enginePINVOKE.GameState_Shutdown(swigCPtr);
  }

  public bool Init(int argc, SWIGTYPE_p_p_char argv) {
    bool ret = enginePINVOKE.GameState_Init(swigCPtr, argc, SWIGTYPE_p_p_char.getCPtr(argv));
    return ret;
  }

  public void RunMainLoop_BlockingHelper() {
    enginePINVOKE.GameState_RunMainLoop_BlockingHelper(swigCPtr);
  }

  public void ProcessEvents() {
    enginePINVOKE.GameState_ProcessEvents(swigCPtr);
  }

  public void TickIfNeeded() {
    enginePINVOKE.GameState_TickIfNeeded(swigCPtr);
  }

  public void Tick() {
    enginePINVOKE.GameState_Tick(swigCPtr);
  }

  public void UpdateGlobalInput() {
    enginePINVOKE.GameState_UpdateGlobalInput(swigCPtr);
  }

  public void SetRandomSeed(int arg0) {
    enginePINVOKE.GameState_SetRandomSeed(swigCPtr, arg0);
  }

  public bool IsPaused() {
    bool ret = enginePINVOKE.GameState_IsPaused(swigCPtr);
    return ret;
  }

  public void SetPaused(bool newState) {
    enginePINVOKE.GameState_SetPaused(swigCPtr, newState);
  }

  public int GetRandomSeed() {
    int ret = enginePINVOKE.GameState_GetRandomSeed(swigCPtr);
    return ret;
  }

  public bool IsPlayingBackDemo() {
    bool ret = enginePINVOKE.GameState_IsPlayingBackDemo(swigCPtr);
    return ret;
  }

  public void SignalGameExit() {
    enginePINVOKE.GameState_SignalGameExit(swigCPtr);
  }

  public void SignalEndCurrentMode() {
    enginePINVOKE.GameState_SignalEndCurrentMode(swigCPtr);
  }

  public bool ShouldExit() {
    bool ret = enginePINVOKE.GameState_ShouldExit(swigCPtr);
    return ret;
  }

  public bool GetPropPhysicsDebugDraw() {
    bool ret = enginePINVOKE.GameState_GetPropPhysicsDebugDraw(swigCPtr);
    return ret;
  }

  public void SetPropPhysicsDebugDraw(bool val) {
    enginePINVOKE.GameState_SetPropPhysicsDebugDraw(swigCPtr, val);
  }

}

public class ObjectLayer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ObjectLayer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectLayer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectLayer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool Init() {
    bool ret = enginePINVOKE.ObjectLayer_Init(swigCPtr);
    return ret;
  }

  public void Shutdown() {
    enginePINVOKE.ObjectLayer_Shutdown(swigCPtr);
  }

  public void SetName(string _name) {
    enginePINVOKE.ObjectLayer_SetName(swigCPtr, _name);
  }

  public string GetName() {
    string ret = enginePINVOKE.ObjectLayer_GetName(swigCPtr);
    return ret;
  }

  public void SetScrollSpeed(float _scroll_speed) {
    enginePINVOKE.ObjectLayer_SetScrollSpeed(swigCPtr, _scroll_speed);
  }

  public float GetScrollSpeed() {
    float ret = enginePINVOKE.ObjectLayer_GetScrollSpeed(swigCPtr);
    return ret;
  }

  public bool IsVisible() {
    bool ret = enginePINVOKE.ObjectLayer_IsVisible(swigCPtr);
    return ret;
  }

  public void SetVisible(bool _visible) {
    enginePINVOKE.ObjectLayer_SetVisible(swigCPtr, _visible);
  }

  public void Draw() {
    enginePINVOKE.ObjectLayer_Draw(swigCPtr);
  }

  public void AddObject(Object arg0) {
    enginePINVOKE.ObjectLayer_AddObject(swigCPtr, Object.getCPtr(arg0));
  }

  public void RemoveObject(Object arg0) {
    enginePINVOKE.ObjectLayer_RemoveObject(swigCPtr, Object.getCPtr(arg0));
  }

  public ObjectLayer() : this(enginePINVOKE.new_ObjectLayer(), true) {
  }

}

public class CollisionDirection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CollisionDirection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CollisionDirection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CollisionDirection() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_CollisionDirection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public uint up {
    set {
      enginePINVOKE.CollisionDirection_up_set(swigCPtr, value);
    } 
    get {
      uint ret = enginePINVOKE.CollisionDirection_up_get(swigCPtr);
      return ret;
    } 
  }

  public uint down {
    set {
      enginePINVOKE.CollisionDirection_down_set(swigCPtr, value);
    } 
    get {
      uint ret = enginePINVOKE.CollisionDirection_down_get(swigCPtr);
      return ret;
    } 
  }

  public uint left {
    set {
      enginePINVOKE.CollisionDirection_left_set(swigCPtr, value);
    } 
    get {
      uint ret = enginePINVOKE.CollisionDirection_left_get(swigCPtr);
      return ret;
    } 
  }

  public uint right {
    set {
      enginePINVOKE.CollisionDirection_right_set(swigCPtr, value);
    } 
    get {
      uint ret = enginePINVOKE.CollisionDirection_right_get(swigCPtr);
      return ret;
    } 
  }

  public CollisionDirection() : this(enginePINVOKE.new_CollisionDirection(), true) {
  }

}

public enum VolatileStateLevel {
  LEVEL_ITEMS,
  LEVEL_PLAYERS
}

public partial class Object : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Object(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Object obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Object() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_Object(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static bool debug_draw_bounding_boxes {
    set {
      enginePINVOKE.Object_debug_draw_bounding_boxes_set(value);
    } 
    get {
      bool ret = enginePINVOKE.Object_debug_draw_bounding_boxes_get();
      return ret;
    } 
  }

  public uint GetID() {
    uint ret = enginePINVOKE.Object_GetID(swigCPtr);
    return ret;
  }

  public virtual bool Init() {
    bool ret = enginePINVOKE.Object_Init(swigCPtr);
    return ret;
  }

  public virtual void Shutdown() {
    enginePINVOKE.Object_Shutdown(swigCPtr);
  }

  public virtual void Update() {
    enginePINVOKE.Object_Update(swigCPtr);
  }

  public virtual void InitPhysics() {
    enginePINVOKE.Object_InitPhysics(swigCPtr);
  }

  public virtual void PlayAnimation(uint uiIndex) {
    enginePINVOKE.Object_PlayAnimation(swigCPtr, uiIndex);
  }

  public void SetDrawBounds(bool bDrawBounds, SWIGTYPE_p_ALLEGRO_COLOR color) {
    enginePINVOKE.Object_SetDrawBounds__SWIG_0(swigCPtr, bDrawBounds, SWIGTYPE_p_ALLEGRO_COLOR.getCPtr(color));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDrawBounds(bool bDrawBounds) {
    enginePINVOKE.Object_SetDrawBounds__SWIG_1(swigCPtr, bDrawBounds);
  }

  public void FadeOut(int time) {
    enginePINVOKE.Object_FadeOut(swigCPtr, time);
  }

  public virtual void Draw() {
    enginePINVOKE.Object_Draw(swigCPtr);
  }

  public void Transform(SWIGTYPE_p_float x, SWIGTYPE_p_float y, int offset_x, int offset_y) {
    enginePINVOKE.Object_Transform__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y), offset_x, offset_y);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Transform(SWIGTYPE_p_float x, SWIGTYPE_p_float y, int offset_x) {
    enginePINVOKE.Object_Transform__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y), offset_x);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Transform(SWIGTYPE_p_float x, SWIGTYPE_p_float y) {
    enginePINVOKE.Object_Transform__SWIG_2(swigCPtr, SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformRect(SWIGTYPE_p__Rect r) {
    enginePINVOKE.Object_TransformRect(swigCPtr, SWIGTYPE_p__Rect.getCPtr(r));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDisplayTime(int time) {
    enginePINVOKE.Object_SetDisplayTime(swigCPtr, time);
  }

  public int GetDisplayTime() {
    int ret = enginePINVOKE.Object_GetDisplayTime(swigCPtr);
    return ret;
  }

  public void DrawAtOffset(int x, int y, SWIGTYPE_p_Sprite arg2) {
    enginePINVOKE.Object_DrawAtOffset__SWIG_0(swigCPtr, x, y, SWIGTYPE_p_Sprite.getCPtr(arg2));
  }

  public void DrawAtOffset(int x, int y) {
    enginePINVOKE.Object_DrawAtOffset__SWIG_1(swigCPtr, x, y);
  }

  public int GetPropX() {
    int ret = enginePINVOKE.Object_GetPropX(swigCPtr);
    return ret;
  }

  public int GetPropY() {
    int ret = enginePINVOKE.Object_GetPropY(swigCPtr);
    return ret;
  }

  public b2Vec2 GetXY() {
    b2Vec2 ret = new b2Vec2(enginePINVOKE.Object_GetXY(swigCPtr), true);
    return ret;
  }

  public b2Vec2 GetPos() {
    global::System.IntPtr cPtr = enginePINVOKE.Object_GetPos(swigCPtr);
    b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
    return ret;
  }

  public void SetPropX(int _x) {
    enginePINVOKE.Object_SetPropX(swigCPtr, _x);
  }

  public void SetPropY(int _y) {
    enginePINVOKE.Object_SetPropY(swigCPtr, _y);
  }

  public void SetXY(int _x, int _y) {
    enginePINVOKE.Object_SetXY__SWIG_0(swigCPtr, _x, _y);
  }

  public void SetPos(b2Vec2 _pos) {
    enginePINVOKE.Object_SetPos(swigCPtr, b2Vec2.getCPtr(_pos));
  }

  public void SetXY(b2Vec2 _pos) {
    enginePINVOKE.Object_SetXY__SWIG_1(swigCPtr, b2Vec2.getCPtr(_pos));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetAlpha() {
    int ret = enginePINVOKE.Object_GetAlpha(swigCPtr);
    return ret;
  }

  public void SetAlpha(int a) {
    enginePINVOKE.Object_SetAlpha(swigCPtr, a);
  }

  public void SetFlipX(bool val) {
    enginePINVOKE.Object_SetFlipX(swigCPtr, val);
  }

  public void SetFlipY(bool val) {
    enginePINVOKE.Object_SetFlipY(swigCPtr, val);
  }

  public float GetVelX() {
    float ret = enginePINVOKE.Object_GetVelX(swigCPtr);
    return ret;
  }

  public float GetVelY() {
    float ret = enginePINVOKE.Object_GetVelY(swigCPtr);
    return ret;
  }

  public b2Vec2 GetVelXY() {
    b2Vec2 ret = new b2Vec2(enginePINVOKE.Object_GetVelXY(swigCPtr), true);
    return ret;
  }

  public void SetVelX(float _vx) {
    enginePINVOKE.Object_SetVelX(swigCPtr, _vx);
  }

  public void SetVelY(float _vy) {
    enginePINVOKE.Object_SetVelY(swigCPtr, _vy);
  }

  public void SetVelXY(float _vx, float _vy) {
    enginePINVOKE.Object_SetVelXY__SWIG_0(swigCPtr, _vx, _vy);
  }

  public void SetVelXY(b2Vec2 v) {
    enginePINVOKE.Object_SetVelXY__SWIG_1(swigCPtr, b2Vec2.getCPtr(v));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetWidth() {
    int ret = enginePINVOKE.Object_GetWidth(swigCPtr);
    return ret;
  }

  public virtual int GetHeight() {
    int ret = enginePINVOKE.Object_GetHeight(swigCPtr);
    return ret;
  }

  public b2Vec2 GetCenter() {
    b2Vec2 ret = new b2Vec2(enginePINVOKE.Object_GetCenter(swigCPtr), true);
    return ret;
  }

  public void ResetForNextFrame() {
    enginePINVOKE.Object_ResetForNextFrame(swigCPtr);
  }

  public virtual void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.Object_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public virtual void OnAnimationLooped() {
    enginePINVOKE.Object_OnAnimationLooped(swigCPtr);
  }

  public bool IsDead() {
    bool ret = enginePINVOKE.Object_IsDead(swigCPtr);
    return ret;
  }

  public void SetIsDead(bool bVal) {
    enginePINVOKE.Object_SetIsDead(swigCPtr, bVal);
  }

  public ObjectLayer GetLayer() {
    global::System.IntPtr cPtr = enginePINVOKE.Object_GetLayer(swigCPtr);
    ObjectLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectLayer(cPtr, false);
    return ret;
  }

  public void SetLayer(ObjectLayer l) {
    enginePINVOKE.Object_SetLayer(swigCPtr, ObjectLayer.getCPtr(l));
  }

  public void ApplyImpulse(float x, float y) {
    enginePINVOKE.Object_ApplyImpulse__SWIG_0(swigCPtr, x, y);
  }

  public void ApplyImpulse(b2Vec2 v) {
    enginePINVOKE.Object_ApplyImpulse__SWIG_1(swigCPtr, b2Vec2.getCPtr(v));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool LoadFromObjectDef(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.Object_LoadFromObjectDef(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool FinishLoading() {
    bool ret = enginePINVOKE.Object_FinishLoading(swigCPtr);
    return ret;
  }

  public bool ContainsPoint(b2Vec2 p) {
    bool ret = enginePINVOKE.Object_ContainsPoint(swigCPtr, b2Vec2.getCPtr(p));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ResetVolatileState(VolatileStateLevel level) {
    enginePINVOKE.Object_ResetVolatileState(swigCPtr, (int)level);
  }

  public static Object AddPrototype(string type, Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.Object_AddPrototype(type, Object.getCPtr(obj));
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Object CreateObject(string type) {
    global::System.IntPtr cPtr = enginePINVOKE.Object_CreateObject(type);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetPropRotateVelocity() {
    float ret = enginePINVOKE.Object_GetPropRotateVelocity(swigCPtr);
    return ret;
  }

  public void SetPropRotateVelocity(float val) {
    enginePINVOKE.Object_SetPropRotateVelocity(swigCPtr, val);
  }

  public string GetPropObjectDefName() {
    string ret = enginePINVOKE.Object_GetPropObjectDefName(swigCPtr);
    return ret;
  }

  public void SetPropObjectDefName(string val) {
    enginePINVOKE.Object_SetPropObjectDefName(swigCPtr, val);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetPropDebugFlag() {
    bool ret = enginePINVOKE.Object_GetPropDebugFlag(swigCPtr);
    return ret;
  }

  public void SetPropDebugFlag(bool val) {
    enginePINVOKE.Object_SetPropDebugFlag(swigCPtr, val);
  }

  public bool IsSensor() {
    bool ret = enginePINVOKE.Object_IsSensor(swigCPtr);
    return ret;
  }

  public b2Vec2 Position {
    set {
      enginePINVOKE.Object_Position_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = enginePINVOKE.Object_Position_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

  public float RotateVelocity {
    set {
      enginePINVOKE.Object_RotateVelocity_set(swigCPtr, value);
    } 
    get {
      float ret = enginePINVOKE.Object_RotateVelocity_get(swigCPtr);
      return ret;
    } 
  }

  public string ObjectDefName {
    set {
      enginePINVOKE.Object_ObjectDefName_set(swigCPtr, value);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = enginePINVOKE.Object_ObjectDefName_get(swigCPtr);
      if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool DebugFlag {
    set {
      enginePINVOKE.Object_DebugFlag_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.Object_DebugFlag_get(swigCPtr);
      return ret;
    } 
  }

}

public class ObjectBackground : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectBackground(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectBackground_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectBackground obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectBackground() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectBackground(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectBackground_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectBackground DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectBackground_DynamicCastFrom(Object.getCPtr(obj));
    ObjectBackground ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectBackground(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectBackground_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectBackground_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectBackground_Update(swigCPtr);
  }

  public override void Draw() {
    enginePINVOKE.ObjectBackground_Draw(swigCPtr);
  }

  public ObjectBackground() : this(enginePINVOKE.new_ObjectBackground(), true) {
  }

}

public class ObjectBounce : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectBounce(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectBounce_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectBounce obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectBounce() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectBounce(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectBounce_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectBounce DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectBounce_DynamicCastFrom(Object.getCPtr(obj));
    ObjectBounce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectBounce(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectBounce_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectBounce_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectBounce_Update(swigCPtr);
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectBounce_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.ObjectBounce_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public ObjectBounce() : this(enginePINVOKE.new_ObjectBounce(), true) {
  }

}

public class ObjectCollectable : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectCollectable(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectCollectable_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectCollectable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectCollectable() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectCollectable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectCollectable_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectCollectable DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectCollectable_DynamicCastFrom(Object.getCPtr(obj));
    ObjectCollectable ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectCollectable(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectCollectable_Init(swigCPtr);
    return ret;
  }

  public override void ResetVolatileState(VolatileStateLevel level) {
    enginePINVOKE.ObjectCollectable_ResetVolatileState(swigCPtr, (int)level);
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectCollectable_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectCollectable_Update(swigCPtr);
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectCollectable_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ObjectCollectable() : this(enginePINVOKE.new_ObjectCollectable(), true) {
  }

  public override void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.ObjectCollectable_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public bool GetPropConsumed() {
    bool ret = enginePINVOKE.ObjectCollectable_GetPropConsumed(swigCPtr);
    return ret;
  }

  public void SetPropConsumed(bool val) {
    enginePINVOKE.ObjectCollectable_SetPropConsumed(swigCPtr, val);
  }

}

public class Button : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Button(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Button obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Button() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_Button(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool active {
    set {
      enginePINVOKE.Button_active_set(swigCPtr, value);
    } 
    get {
      bool ret = enginePINVOKE.Button_active_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Sprite sprite {
    set {
      enginePINVOKE.Button_sprite_set(swigCPtr, SWIGTYPE_p_Sprite.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = enginePINVOKE.Button_sprite_get(swigCPtr);
      SWIGTYPE_p_Sprite ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Sprite(cPtr, false);
      return ret;
    } 
  }

  public Button() : this(enginePINVOKE.new_Button(), true) {
  }

}

public class ObjectController : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectController(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectController_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectController obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectController() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectController(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectController_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectController DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectController_DynamicCastFrom(Object.getCPtr(obj));
    ObjectController ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectController(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectController_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectController_Shutdown(swigCPtr);
  }

  public void Clear() {
    enginePINVOKE.ObjectController_Clear(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectController_Update(swigCPtr);
  }

  public override void Draw() {
    enginePINVOKE.ObjectController_Draw(swigCPtr);
  }

  public override int GetWidth() {
    int ret = enginePINVOKE.ObjectController_GetWidth(swigCPtr);
    return ret;
  }

  public override int GetHeight() {
    int ret = enginePINVOKE.ObjectController_GetHeight(swigCPtr);
    return ret;
  }

  public ObjectController() : this(enginePINVOKE.new_ObjectController(), true) {
  }

}

public enum CutBarState {
  STATE_INACTIVE,
  STATE_ROLL_IN,
  STATE_ACTIVE,
  STATE_ROLL_OUT
}

public class ObjectCutBars : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectCutBars(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectCutBars_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectCutBars obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectCutBars() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectCutBars(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectCutBars_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectCutBars DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectCutBars_DynamicCastFrom(Object.getCPtr(obj));
    ObjectCutBars ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectCutBars(cPtr, false);
    return ret;
  }

  public void Clear() {
    enginePINVOKE.ObjectCutBars_Clear(swigCPtr);
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectCutBars_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectCutBars_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectCutBars_Shutdown(swigCPtr);
  }

  public void Start() {
    enginePINVOKE.ObjectCutBars_Start(swigCPtr);
  }

  public void Stop() {
    enginePINVOKE.ObjectCutBars_Stop(swigCPtr);
  }

  public void SetText(string text) {
    enginePINVOKE.ObjectCutBars_SetText(swigCPtr, text);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update() {
    enginePINVOKE.ObjectCutBars_Update(swigCPtr);
  }

  public override void Draw() {
    enginePINVOKE.ObjectCutBars_Draw(swigCPtr);
  }

  public ObjectCutBars() : this(enginePINVOKE.new_ObjectCutBars(), true) {
  }

}

public enum DoorType {
  INVALID_TYPE = -1,
  SWITCH_TO_ANOTHER_MODE = 0,
  LEVEL_EXIT,
  WARP_TO_ANOTHER_PORTAL,
  RETURN_TO_LAST_MODE
}

public class ObjectDoor : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectDoor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectDoor_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectDoor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectDoor() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectDoor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectDoor_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectDoor DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectDoor_DynamicCastFrom(Object.getCPtr(obj));
    ObjectDoor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectDoor(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectDoor_Init(swigCPtr);
    return ret;
  }

  public void Clear() {
    enginePINVOKE.ObjectDoor_Clear(swigCPtr);
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectDoor_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectDoor_Update(swigCPtr);
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectDoor_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Activate() {
    enginePINVOKE.ObjectDoor_Activate(swigCPtr);
  }

  public ObjectDoor() : this(enginePINVOKE.new_ObjectDoor(), true) {
  }

  public string GetName() {
    string ret = enginePINVOKE.ObjectDoor_GetName(swigCPtr);
    return ret;
  }

}

public class ObjectEnemy : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectEnemy(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectEnemy_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectEnemy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectEnemy() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectEnemy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectEnemy_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectEnemy DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectEnemy_DynamicCastFrom(Object.getCPtr(obj));
    ObjectEnemy ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectEnemy(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectEnemy_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectEnemy_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectEnemy_Update(swigCPtr);
  }

  public ObjectEnemy() : this(enginePINVOKE.new_ObjectEnemy(), true) {
  }

  public override void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.ObjectEnemy_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public static int iSpawnedObjectCount {
    set {
      enginePINVOKE.ObjectEnemy_iSpawnedObjectCount_set(value);
    } 
    get {
      int ret = enginePINVOKE.ObjectEnemy_iSpawnedObjectCount_get();
      return ret;
    } 
  }

}

public class ObjectFan : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectFan(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectFan_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectFan obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectFan() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectFan(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectFan_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectFan DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectFan_DynamicCastFrom(Object.getCPtr(obj));
    ObjectFan ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectFan(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectFan_Init(swigCPtr);
    return ret;
  }

  public void Clear() {
    enginePINVOKE.ObjectFan_Clear(swigCPtr);
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectFan_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectFan_Update(swigCPtr);
  }

  public override void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.ObjectFan_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectFan_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ObjectFan() : this(enginePINVOKE.new_ObjectFan(), true) {
  }

}

public enum PlayerState {
  STANDING,
  JUMPING,
  FALLING,
  WALKING_THRU_DOOR,
  SLIDING_DOWN_WALL
}

public enum InputStateMask {
  INPUT_NOTHING = 0x0,
  INPUT_JUMP = 0x1,
  INPUT_ACTION1 = 0x2,
  INPUT_LEFT = 0x4,
  INPUT_RIGHT = 0x8,
  INPUT_UP = 0x10,
  INPUT_DOWN = 0x20
}

public class ObjectPlayer : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectPlayer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectPlayer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectPlayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectPlayer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectPlayer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectPlayer_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectPlayer DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectPlayer_DynamicCastFrom(Object.getCPtr(obj));
    ObjectPlayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectPlayer(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectPlayer_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectPlayer_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectPlayer_Update(swigCPtr);
  }

  public override void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.ObjectPlayer_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public override void ResetVolatileState(VolatileStateLevel level) {
    enginePINVOKE.ObjectPlayer_ResetVolatileState(swigCPtr, (int)level);
  }

  public override void OnAnimationLooped() {
    enginePINVOKE.ObjectPlayer_OnAnimationLooped(swigCPtr);
  }

  public override void PlayAnimation(uint uiIndex) {
    enginePINVOKE.ObjectPlayer_PlayAnimation(swigCPtr, uiIndex);
  }

  public int GetNumRings() {
    int ret = enginePINVOKE.ObjectPlayer_GetNumRings(swigCPtr);
    return ret;
  }

  public ObjectPlayer() : this(enginePINVOKE.new_ObjectPlayer(), true) {
  }

  public bool WantsToSlideOnLeftSide() {
    bool ret = enginePINVOKE.ObjectPlayer_WantsToSlideOnLeftSide(swigCPtr);
    return ret;
  }

  public bool WantsToSlideOnRightSide() {
    bool ret = enginePINVOKE.ObjectPlayer_WantsToSlideOnRightSide(swigCPtr);
    return ret;
  }

  public bool WantsToSlideOnAnySide() {
    bool ret = enginePINVOKE.ObjectPlayer_WantsToSlideOnAnySide(swigCPtr);
    return ret;
  }

}

public class ObjectSpring : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectSpring(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectSpring_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectSpring obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectSpring() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectSpring(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public b2Vec2 GetPropDirection() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectSpring_GetPropDirection(swigCPtr);
    b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
    return ret;
  }

  public void SetPropDirection(b2Vec2 val) {
    enginePINVOKE.ObjectSpring_SetPropDirection(swigCPtr, b2Vec2.getCPtr(val));
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectSpring_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectSpring DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectSpring_DynamicCastFrom(Object.getCPtr(obj));
    ObjectSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectSpring(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectSpring_Init(swigCPtr);
    return ret;
  }

  public virtual void Clear() {
    enginePINVOKE.ObjectSpring_Clear(swigCPtr);
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectSpring_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectSpring_Update(swigCPtr);
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectSpring_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ObjectSpring() : this(enginePINVOKE.new_ObjectSpring(), true) {
  }

  public override void OnCollide(Object obj, SWIGTYPE_p_b2WorldManifold pkbWorldManifold) {
    enginePINVOKE.ObjectSpring_OnCollide(swigCPtr, Object.getCPtr(obj), SWIGTYPE_p_b2WorldManifold.getCPtr(pkbWorldManifold));
  }

  public bool IsSpringActive() {
    bool ret = enginePINVOKE.ObjectSpring_IsSpringActive(swigCPtr);
    return ret;
  }

  public b2Vec2 Direction {
    set {
      enginePINVOKE.ObjectSpring_Direction_set(swigCPtr, b2Vec2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = enginePINVOKE.ObjectSpring_Direction_get(swigCPtr);
      b2Vec2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new b2Vec2(cPtr, false);
      return ret;
    } 
  }

}

public class ObjectStatic : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectStatic(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectStatic_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectStatic obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectStatic() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectStatic(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectStatic_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectStatic DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectStatic_DynamicCastFrom(Object.getCPtr(obj));
    ObjectStatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectStatic(cPtr, false);
    return ret;
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectStatic_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectStatic_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectStatic_Shutdown(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectStatic_Update(swigCPtr);
  }

  public ObjectStatic() : this(enginePINVOKE.new_ObjectStatic(), true) {
  }

  public void UpdateSpawns() {
    enginePINVOKE.ObjectStatic_UpdateSpawns(swigCPtr);
  }

}

public class ObjectText : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ObjectText(global::System.IntPtr cPtr, bool cMemoryOwn) : base(enginePINVOKE.ObjectText_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectText obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectText() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectText(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Object Clone() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectText_Clone(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public static ObjectText DynamicCastFrom(Object obj) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectText_DynamicCastFrom(Object.getCPtr(obj));
    ObjectText ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectText(cPtr, false);
    return ret;
  }

  public override bool Init() {
    bool ret = enginePINVOKE.ObjectText_Init(swigCPtr);
    return ret;
  }

  public override void Shutdown() {
    enginePINVOKE.ObjectText_Shutdown(swigCPtr);
  }

  public void Clear() {
    enginePINVOKE.ObjectText_Clear(swigCPtr);
  }

  public override void Update() {
    enginePINVOKE.ObjectText_Update(swigCPtr);
  }

  public override void Draw() {
    enginePINVOKE.ObjectText_Draw(swigCPtr);
  }

  public bool SetAvatarFilename(string file) {
    bool ret = enginePINVOKE.ObjectText_SetAvatarFilename(swigCPtr, file);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetModalActive(bool state) {
    enginePINVOKE.ObjectText_SetModalActive(swigCPtr, state);
  }

  public virtual bool LoadObjectProperties(SWIGTYPE_p_XMLNode xDef) {
    bool ret = enginePINVOKE.ObjectText_LoadObjectProperties(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetText(string txt) {
    enginePINVOKE.ObjectText_SetText(swigCPtr, txt);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetWidth() {
    int ret = enginePINVOKE.ObjectText_GetWidth(swigCPtr);
    return ret;
  }

  public override int GetHeight() {
    int ret = enginePINVOKE.ObjectText_GetHeight(swigCPtr);
    return ret;
  }

  public ObjectText() : this(enginePINVOKE.new_ObjectText(), true) {
  }

}

public class ObjectFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ObjectFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectFactory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_ObjectFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static ObjectFactory GetInstance() {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectFactory_GetInstance();
    ObjectFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectFactory(cPtr, false);
    return ret;
  }

  public static void SetInstance(ObjectFactory c) {
    enginePINVOKE.ObjectFactory_SetInstance(ObjectFactory.getCPtr(c));
  }

  public static void CreateInstance() {
    enginePINVOKE.ObjectFactory_CreateInstance();
  }

  public static void FreeInstance() {
    enginePINVOKE.ObjectFactory_FreeInstance();
  }

  public int Init() {
    int ret = enginePINVOKE.ObjectFactory_Init(swigCPtr);
    return ret;
  }

  public void Shutdown() {
    enginePINVOKE.ObjectFactory_Shutdown(swigCPtr);
  }

  public string GetClassNameFromXML(SWIGTYPE_p_XMLNode xObjectDef) {
    string ret = enginePINVOKE.ObjectFactory_GetClassNameFromXML(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xObjectDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Object CreateObjectFromXML(SWIGTYPE_p_XMLNode xObjectDef) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectFactory_CreateObjectFromXML(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xObjectDef));
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Object CreateObject(string objDefName) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectFactory_CreateObject(swigCPtr, objDefName);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddObjectDefinition(string objDefName, SWIGTYPE_p_XMLNode xObjectDef) {
    bool ret = enginePINVOKE.ObjectFactory_AddObjectDefinition(swigCPtr, objDefName, SWIGTYPE_p_XMLNode.getCPtr(xObjectDef));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_XMLNode FindObjectDefinition(string objDefName) {
    global::System.IntPtr cPtr = enginePINVOKE.ObjectFactory_FindObjectDefinition(swigCPtr, objDefName);
    SWIGTYPE_p_XMLNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XMLNode(cPtr, false);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetObjectDefinitionCount() {
    int ret = enginePINVOKE.ObjectFactory_GetObjectDefinitionCount(swigCPtr);
    return ret;
  }

  public string GetObjectDefinition(int iIndex) {
    string ret = enginePINVOKE.ObjectFactory_GetObjectDefinition(swigCPtr, iIndex);
    return ret;
  }

  public bool LoadObjectDefsFromXML(SWIGTYPE_p_XMLNode xObjDefs) {
    bool ret = enginePINVOKE.ObjectFactory_LoadObjectDefsFromXML(swigCPtr, SWIGTYPE_p_XMLNode.getCPtr(xObjDefs));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadObjectDefsFromIncludeXML(string file) {
    bool ret = enginePINVOKE.ObjectFactory_LoadObjectDefsFromIncludeXML(swigCPtr, file);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

public enum EditorMode {
  EDITOR_NONE,
  EDITOR_MOVE,
  EDITOR_SELECT
}

public class EditorBaseUI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EditorBaseUI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EditorBaseUI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EditorBaseUI() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_EditorBaseUI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void OnObjectsChanged() {
    if (SwigDerivedClassHasMethod("OnObjectsChanged", swigMethodTypes0)) enginePINVOKE.EditorBaseUI_OnObjectsChangedSwigExplicitEditorBaseUI(swigCPtr); else enginePINVOKE.EditorBaseUI_OnObjectsChanged(swigCPtr);
  }

  public virtual void OnSelectionChanged() {
    if (SwigDerivedClassHasMethod("OnSelectionChanged", swigMethodTypes1)) enginePINVOKE.EditorBaseUI_OnSelectionChangedSwigExplicitEditorBaseUI(swigCPtr); else enginePINVOKE.EditorBaseUI_OnSelectionChanged(swigCPtr);
  }

  public virtual void OnSelectedObjectMoved() {
    if (SwigDerivedClassHasMethod("OnSelectedObjectMoved", swigMethodTypes2)) enginePINVOKE.EditorBaseUI_OnSelectedObjectMovedSwigExplicitEditorBaseUI(swigCPtr); else enginePINVOKE.EditorBaseUI_OnSelectedObjectMoved(swigCPtr);
  }

  public EditorBaseUI() : this(enginePINVOKE.new_EditorBaseUI(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnObjectsChanged", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateEditorBaseUI_0(SwigDirectorOnObjectsChanged);
    if (SwigDerivedClassHasMethod("OnSelectionChanged", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateEditorBaseUI_1(SwigDirectorOnSelectionChanged);
    if (SwigDerivedClassHasMethod("OnSelectedObjectMoved", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateEditorBaseUI_2(SwigDirectorOnSelectedObjectMoved);
    enginePINVOKE.EditorBaseUI_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(EditorBaseUI));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnObjectsChanged() {
    OnObjectsChanged();
  }

  private void SwigDirectorOnSelectionChanged() {
    OnSelectionChanged();
  }

  private void SwigDirectorOnSelectedObjectMoved() {
    OnSelectedObjectMoved();
  }

  public delegate void SwigDelegateEditorBaseUI_0();
  public delegate void SwigDelegateEditorBaseUI_1();
  public delegate void SwigDelegateEditorBaseUI_2();

  private SwigDelegateEditorBaseUI_0 swigDelegate0;
  private SwigDelegateEditorBaseUI_1 swigDelegate1;
  private SwigDelegateEditorBaseUI_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
}

public class Editor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Editor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Editor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Editor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_Editor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Editor() : this(enginePINVOKE.new_Editor(), true) {
  }

  public Object CreateObject(string objDefName, string layerName) {
    global::System.IntPtr cPtr = enginePINVOKE.Editor_CreateObject(swigCPtr, objDefName, layerName);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public void CreateAndSelectObject(string objDefName, string layerName) {
    enginePINVOKE.Editor_CreateAndSelectObject(swigCPtr, objDefName, layerName);
  }

  public void CreateAndSelect_UsePreviousLayerAndObject() {
    enginePINVOKE.Editor_CreateAndSelect_UsePreviousLayerAndObject(swigCPtr);
  }

  public void MouseToLayerCoords(b2Vec2 layer_coord_out, ObjectLayer layer) {
    enginePINVOKE.Editor_MouseToLayerCoords(swigCPtr, b2Vec2.getCPtr(layer_coord_out), ObjectLayer.getCPtr(layer));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SnapToGrid(b2Vec2 pos) {
    enginePINVOKE.Editor_SnapToGrid(swigCPtr, b2Vec2.getCPtr(pos));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateSelectedObjectPosition() {
    enginePINVOKE.Editor_UpdateSelectedObjectPosition(swigCPtr);
  }

  public void SelectObject(Object obj) {
    enginePINVOKE.Editor_SelectObject(swigCPtr, Object.getCPtr(obj));
  }

  public void Draw() {
    enginePINVOKE.Editor_Draw(swigCPtr);
  }

  public void CommonUpdate() {
    enginePINVOKE.Editor_CommonUpdate(swigCPtr);
  }

  public void CommonAfterUpdate() {
    enginePINVOKE.Editor_CommonAfterUpdate(swigCPtr);
  }

  public void FlashText(string text) {
    enginePINVOKE.Editor_FlashText(swigCPtr, text);
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void NoModeUpdate() {
    enginePINVOKE.Editor_NoModeUpdate(swigCPtr);
  }

  public void ResetVolatileLevelState(VolatileStateLevel level) {
    enginePINVOKE.Editor_ResetVolatileLevelState(swigCPtr, (int)level);
  }

  public void UpdateMove() {
    enginePINVOKE.Editor_UpdateMove(swigCPtr);
  }

  public Object GetObjectUnderCursor() {
    global::System.IntPtr cPtr = enginePINVOKE.Editor_GetObjectUnderCursor(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public void SetDrawBoundingBoxes_AllObjects(bool should_draw) {
    enginePINVOKE.Editor_SetDrawBoundingBoxes_AllObjects(swigCPtr, should_draw);
  }

  public void Update() {
    enginePINVOKE.Editor_Update(swigCPtr);
  }

  public void DeleteCurrentSelection() {
    enginePINVOKE.Editor_DeleteCurrentSelection(swigCPtr);
  }

  public bool GetPropSnapToGrid() {
    bool ret = enginePINVOKE.Editor_GetPropSnapToGrid(swigCPtr);
    return ret;
  }

  public void SetPropSnapToGrid(bool val) {
    enginePINVOKE.Editor_SetPropSnapToGrid(swigCPtr, val);
  }

  public Object GetPropSelection() {
    global::System.IntPtr cPtr = enginePINVOKE.Editor_GetPropSelection(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public void SetPropSelection(Object val) {
    enginePINVOKE.Editor_SetPropSelection(swigCPtr, Object.getCPtr(val));
  }

  public EditorBaseUI GetPropEditorUI() {
    global::System.IntPtr cPtr = enginePINVOKE.Editor_GetPropEditorUI(swigCPtr);
    EditorBaseUI ret = (cPtr == global::System.IntPtr.Zero) ? null : new EditorBaseUI(cPtr, false);
    return ret;
  }

  public void SetPropEditorUI(EditorBaseUI val) {
    enginePINVOKE.Editor_SetPropEditorUI(swigCPtr, EditorBaseUI.getCPtr(val));
  }

}

public partial class b2Vec2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal b2Vec2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(b2Vec2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~b2Vec2() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          enginePINVOKE.delete_b2Vec2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float x {
    set {
      enginePINVOKE.b2Vec2_x_set(swigCPtr, value);
    } 
    get {
      float ret = enginePINVOKE.b2Vec2_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      enginePINVOKE.b2Vec2_y_set(swigCPtr, value);
    } 
    get {
      float ret = enginePINVOKE.b2Vec2_y_get(swigCPtr);
      return ret;
    } 
  }

  public b2Vec2() : this(enginePINVOKE.new_b2Vec2(), true) {
  }

}

class enginePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="SWIGRegisterExceptionCallbacks_engine")]
    public static extern void SWIGRegisterExceptionCallbacks_engine(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_engine")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_engine(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_engine(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_engine(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(enginePINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(enginePINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="SWIGRegisterStringCallback_engine")]
    public static extern void SWIGRegisterStringCallback_engine(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_engine(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static enginePINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Clear")]
  public static extern void ObjectVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Add")]
  public static extern void ObjectVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_size")]
  public static extern uint ObjectVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_capacity")]
  public static extern uint ObjectVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_reserve")]
  public static extern void ObjectVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectVector__SWIG_0")]
  public static extern global::System.IntPtr new_ObjectVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectVector__SWIG_1")]
  public static extern global::System.IntPtr new_ObjectVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectVector__SWIG_2")]
  public static extern global::System.IntPtr new_ObjectVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_getitemcopy")]
  public static extern global::System.IntPtr ObjectVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_getitem")]
  public static extern global::System.IntPtr ObjectVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_setitem")]
  public static extern void ObjectVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_AddRange")]
  public static extern void ObjectVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_GetRange")]
  public static extern global::System.IntPtr ObjectVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Insert")]
  public static extern void ObjectVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_InsertRange")]
  public static extern void ObjectVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_RemoveAt")]
  public static extern void ObjectVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_RemoveRange")]
  public static extern void ObjectVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Repeat")]
  public static extern global::System.IntPtr ObjectVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Reverse__SWIG_0")]
  public static extern void ObjectVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Reverse__SWIG_1")]
  public static extern void ObjectVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_SetRange")]
  public static extern void ObjectVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Contains")]
  public static extern bool ObjectVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_IndexOf")]
  public static extern int ObjectVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_LastIndexOf")]
  public static extern int ObjectVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectVector_Remove")]
  public static extern bool ObjectVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectVector")]
  public static extern void delete_ObjectVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Clear")]
  public static extern void ObjectLayerVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Add")]
  public static extern void ObjectLayerVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_size")]
  public static extern uint ObjectLayerVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_capacity")]
  public static extern uint ObjectLayerVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_reserve")]
  public static extern void ObjectLayerVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectLayerVector__SWIG_0")]
  public static extern global::System.IntPtr new_ObjectLayerVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectLayerVector__SWIG_1")]
  public static extern global::System.IntPtr new_ObjectLayerVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectLayerVector__SWIG_2")]
  public static extern global::System.IntPtr new_ObjectLayerVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_getitemcopy")]
  public static extern global::System.IntPtr ObjectLayerVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_getitem")]
  public static extern global::System.IntPtr ObjectLayerVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_setitem")]
  public static extern void ObjectLayerVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_AddRange")]
  public static extern void ObjectLayerVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_GetRange")]
  public static extern global::System.IntPtr ObjectLayerVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Insert")]
  public static extern void ObjectLayerVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_InsertRange")]
  public static extern void ObjectLayerVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_RemoveAt")]
  public static extern void ObjectLayerVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_RemoveRange")]
  public static extern void ObjectLayerVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Repeat")]
  public static extern global::System.IntPtr ObjectLayerVector_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Reverse__SWIG_0")]
  public static extern void ObjectLayerVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Reverse__SWIG_1")]
  public static extern void ObjectLayerVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_SetRange")]
  public static extern void ObjectLayerVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Contains")]
  public static extern bool ObjectLayerVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_IndexOf")]
  public static extern int ObjectLayerVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_LastIndexOf")]
  public static extern int ObjectLayerVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayerVector_Remove")]
  public static extern bool ObjectLayerVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectLayerVector")]
  public static extern void delete_ObjectLayerVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_SCREEN_SIZE_X_get")]
  public static extern int DEFAULT_SCREEN_SIZE_X_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_SCREEN_SIZE_Y_get")]
  public static extern int DEFAULT_SCREEN_SIZE_Y_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_VERSION_STRING_get")]
  public static extern string VERSION_STRING_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_FPS_get")]
  public static extern int FPS_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_TIMESTEP_get")]
  public static extern int TIMESTEP_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ONEEIGHTY_OVER_PI_get")]
  public static extern double ONEEIGHTY_OVER_PI_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_PI_OVER_ONEEIGHTY_get")]
  public static extern double PI_OVER_ONEEIGHTY_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_TOLERANCE_get")]
  public static extern double TOLERANCE_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_DEBUG_MSG_LEVEL_get")]
  public static extern int DEFAULT_DEBUG_MSG_LEVEL_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_MUSIC_BUFFER_SIZE_get")]
  public static extern int DEFAULT_MUSIC_BUFFER_SIZE_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_MUSIC_DATA_SIZE_get")]
  public static extern int DEFAULT_MUSIC_DATA_SIZE_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_StringSplit")]
  public static extern void StringSplit(string jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DebugTrace")]
  public static extern void DebugTrace(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_REDIRECT_STDERR_FILENAME_get")]
  public static extern string REDIRECT_STDERR_FILENAME_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetInstance")]
  public static extern global::System.IntPtr GameOptions_GetInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_SetInstance")]
  public static extern void GameOptions_SetInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_CreateInstance")]
  public static extern void GameOptions_CreateInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_FreeInstance")]
  public static extern void GameOptions_FreeInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetPropMapEditorEnabled")]
  public static extern bool GameOptions_GetPropMapEditorEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_SetPropMapEditorEnabled")]
  public static extern void GameOptions_SetPropMapEditorEnabled(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetPropFirstMode")]
  public static extern string GameOptions_GetPropFirstMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_SetPropFirstMode")]
  public static extern void GameOptions_SetPropFirstMode(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_PrintOptions")]
  public static extern void GameOptions_PrintOptions(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_PrintBanner")]
  public static extern void GameOptions_PrintBanner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_ParseArguments")]
  public static extern bool GameOptions_ParseArguments(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_IsValid")]
  public static extern bool GameOptions_IsValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_Clear")]
  public static extern void GameOptions_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_IsFullscreen")]
  public static extern bool GameOptions_IsFullscreen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetDemoFilename")]
  public static extern string GameOptions_GetDemoFilename(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_RecordDemo")]
  public static extern bool GameOptions_RecordDemo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_PlaybackDemo")]
  public static extern bool GameOptions_PlaybackDemo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetFirstModeOverride")]
  public static extern string GameOptions_GetFirstModeOverride(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_SoundEnabled")]
  public static extern bool GameOptions_SoundEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetDebugStartPaused")]
  public static extern bool GameOptions_GetDebugStartPaused(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_GetDebugMessageLevel")]
  public static extern int GameOptions_GetDebugMessageLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_DrawGraphics")]
  public static extern bool GameOptions_DrawGraphics(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameOptions_WaitForUpdates")]
  public static extern bool GameOptions_WaitForUpdates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameOptions")]
  public static extern void delete_GameOptions(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useExitInfo_set")]
  public static extern void GameModeExitInfo_useExitInfo_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useExitInfo_get")]
  public static extern bool GameModeExitInfo_useExitInfo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastModeName_set")]
  public static extern void GameModeExitInfo_lastModeName_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastModeName_get")]
  public static extern string GameModeExitInfo_lastModeName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_nextModeToLoad_set")]
  public static extern void GameModeExitInfo_nextModeToLoad_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_nextModeToLoad_get")]
  public static extern string GameModeExitInfo_nextModeToLoad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastPortalName_set")]
  public static extern void GameModeExitInfo_lastPortalName_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_lastPortalName_get")]
  public static extern string GameModeExitInfo_lastPortalName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useNextModeToLoad_set")]
  public static extern void GameModeExitInfo_useNextModeToLoad_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useNextModeToLoad_get")]
  public static extern bool GameModeExitInfo_useNextModeToLoad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useLastPortalName_set")]
  public static extern void GameModeExitInfo_useLastPortalName_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_useLastPortalName_get")]
  public static extern bool GameModeExitInfo_useLastPortalName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_showInitialText_set")]
  public static extern void GameModeExitInfo_showInitialText_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameModeExitInfo_showInitialText_get")]
  public static extern bool GameModeExitInfo_showInitialText_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_GameModeExitInfo")]
  public static extern global::System.IntPtr new_GameModeExitInfo();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameModeExitInfo")]
  public static extern void delete_GameModeExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Init")]
  public static extern int GameMode_Init(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Shutdown")]
  public static extern void GameMode_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Draw")]
  public static extern void GameMode_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_Update")]
  public static extern void GameMode_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_SetExitInfo")]
  public static extern void GameMode_SetExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_GetExitInfo")]
  public static extern global::System.IntPtr GameMode_GetExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_SetOldExitInfo")]
  public static extern void GameMode_SetOldExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameMode_GetOldExitInfo")]
  public static extern global::System.IntPtr GameMode_GetOldExitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameMode")]
  public static extern void delete_GameMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetInstance")]
  public static extern global::System.IntPtr GameWorld_GetInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetInstance")]
  public static extern void GameWorld_SetInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_CreateInstance")]
  public static extern void GameWorld_CreateInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_FreeInstance")]
  public static extern void GameWorld_FreeInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetPropAllowExiting")]
  public static extern bool GameWorld_GetPropAllowExiting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetPropAllowExiting")]
  public static extern void GameWorld_SetPropAllowExiting(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld__camera_set")]
  public static extern void GameWorld__camera_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld__camera_get")]
  public static extern global::System.IntPtr GameWorld__camera_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_m_pkCameraLookatTarget_set")]
  public static extern void GameWorld_m_pkCameraLookatTarget_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_m_pkCameraLookatTarget_get")]
  public static extern global::System.IntPtr GameWorld_m_pkCameraLookatTarget_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetObjects")]
  public static extern global::System.IntPtr GameWorld_GetObjects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Init")]
  public static extern int GameWorld_Init(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Shutdown")]
  public static extern void GameWorld_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetEditor")]
  public static extern global::System.IntPtr GameWorld_GetEditor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_IsLoading")]
  public static extern bool GameWorld_IsLoading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_JumpedBackFromADoor")]
  public static extern bool GameWorld_JumpedBackFromADoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetModalObject")]
  public static extern void GameWorld_SetModalObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_AddObject__SWIG_0")]
  public static extern void GameWorld_AddObject__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_AddObject__SWIG_1")]
  public static extern void GameWorld_AddObject__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_FindLayer")]
  public static extern global::System.IntPtr GameWorld_FindLayer(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetLayers")]
  public static extern global::System.IntPtr GameWorld_GetLayers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetPlayer")]
  public static extern global::System.IntPtr GameWorld_GetPlayer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetNumPlayers")]
  public static extern uint GameWorld_GetNumPlayers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Draw")]
  public static extern void GameWorld_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_Update")]
  public static extern void GameWorld_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_DoMainGameUpdate")]
  public static extern void GameWorld_DoMainGameUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SaveWorldOverCurrentFile")]
  public static extern void GameWorld_SaveWorldOverCurrentFile(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_CreateWorld")]
  public static extern global::System.IntPtr GameWorld_CreateWorld(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetWidth")]
  public static extern int GameWorld_GetWidth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetHeight")]
  public static extern int GameWorld_GetHeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetCameraShake__SWIG_0")]
  public static extern void GameWorld_SetCameraShake__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SetCameraShake__SWIG_1")]
  public static extern void GameWorld_SetCameraShake__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_TransformWorldToView")]
  public static extern void GameWorld_TransformWorldToView(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_TransformViewToScreen")]
  public static extern void GameWorld_TransformViewToScreen(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetPlayerCamera")]
  public static extern global::System.IntPtr GameWorld_GetPlayerCamera(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ShowText__SWIG_0")]
  public static extern void GameWorld_ShowText__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ShowText__SWIG_1")]
  public static extern void GameWorld_ShowText__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_ShowText__SWIG_2")]
  public static extern void GameWorld_ShowText__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_FindObjectByID")]
  public static extern global::System.IntPtr GameWorld_FindObjectByID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_GetCamera")]
  public static extern global::System.IntPtr GameWorld_GetCamera(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_AllowPlayerOffscreen")]
  public static extern void GameWorld_AllowPlayerOffscreen(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_PlayerAllowedOffscreen")]
  public static extern bool GameWorld_PlayerAllowedOffscreen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SaveWorld__SWIG_0")]
  public static extern void GameWorld_SaveWorld__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SaveWorld__SWIG_1")]
  public static extern void GameWorld_SaveWorld__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameWorld")]
  public static extern void delete_GameWorld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_GetInstance")]
  public static extern global::System.IntPtr GameState_GetInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SetInstance")]
  public static extern void GameState_SetInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_CreateInstance")]
  public static extern void GameState_CreateInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_FreeInstance")]
  public static extern void GameState_FreeInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_Shutdown")]
  public static extern void GameState_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_Init")]
  public static extern bool GameState_Init(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_RunMainLoop_BlockingHelper")]
  public static extern void GameState_RunMainLoop_BlockingHelper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_ProcessEvents")]
  public static extern void GameState_ProcessEvents(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_TickIfNeeded")]
  public static extern void GameState_TickIfNeeded(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_Tick")]
  public static extern void GameState_Tick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_UpdateGlobalInput")]
  public static extern void GameState_UpdateGlobalInput(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SetRandomSeed")]
  public static extern void GameState_SetRandomSeed(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_IsPaused")]
  public static extern bool GameState_IsPaused(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SetPaused")]
  public static extern void GameState_SetPaused(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_GetRandomSeed")]
  public static extern int GameState_GetRandomSeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_IsPlayingBackDemo")]
  public static extern bool GameState_IsPlayingBackDemo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SignalGameExit")]
  public static extern void GameState_SignalGameExit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SignalEndCurrentMode")]
  public static extern void GameState_SignalEndCurrentMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_ShouldExit")]
  public static extern bool GameState_ShouldExit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_GameState")]
  public static extern void delete_GameState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_GetPropPhysicsDebugDraw")]
  public static extern bool GameState_GetPropPhysicsDebugDraw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameState_SetPropPhysicsDebugDraw")]
  public static extern void GameState_SetPropPhysicsDebugDraw(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_Init")]
  public static extern bool ObjectLayer_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_Shutdown")]
  public static extern void ObjectLayer_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_SetName")]
  public static extern void ObjectLayer_SetName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_GetName")]
  public static extern string ObjectLayer_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_SetScrollSpeed")]
  public static extern void ObjectLayer_SetScrollSpeed(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_GetScrollSpeed")]
  public static extern float ObjectLayer_GetScrollSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_IsVisible")]
  public static extern bool ObjectLayer_IsVisible(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_SetVisible")]
  public static extern void ObjectLayer_SetVisible(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_Draw")]
  public static extern void ObjectLayer_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_AddObject")]
  public static extern void ObjectLayer_AddObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectLayer_RemoveObject")]
  public static extern void ObjectLayer_RemoveObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectLayer")]
  public static extern global::System.IntPtr new_ObjectLayer();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectLayer")]
  public static extern void delete_ObjectLayer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_up_set")]
  public static extern void CollisionDirection_up_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_up_get")]
  public static extern uint CollisionDirection_up_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_down_set")]
  public static extern void CollisionDirection_down_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_down_get")]
  public static extern uint CollisionDirection_down_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_left_set")]
  public static extern void CollisionDirection_left_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_left_get")]
  public static extern uint CollisionDirection_left_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_right_set")]
  public static extern void CollisionDirection_right_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_CollisionDirection_right_get")]
  public static extern uint CollisionDirection_right_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_CollisionDirection")]
  public static extern global::System.IntPtr new_CollisionDirection();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_CollisionDirection")]
  public static extern void delete_CollisionDirection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_debug_draw_bounding_boxes_set")]
  public static extern void Object_debug_draw_bounding_boxes_set(bool jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_debug_draw_bounding_boxes_get")]
  public static extern bool Object_debug_draw_bounding_boxes_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetID")]
  public static extern uint Object_GetID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Init")]
  public static extern bool Object_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Shutdown")]
  public static extern void Object_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Update")]
  public static extern void Object_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_InitPhysics")]
  public static extern void Object_InitPhysics(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_PlayAnimation")]
  public static extern void Object_PlayAnimation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetDrawBounds__SWIG_0")]
  public static extern void Object_SetDrawBounds__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetDrawBounds__SWIG_1")]
  public static extern void Object_SetDrawBounds__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_FadeOut")]
  public static extern void Object_FadeOut(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Draw")]
  public static extern void Object_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Transform__SWIG_0")]
  public static extern void Object_Transform__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Transform__SWIG_1")]
  public static extern void Object_Transform__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Transform__SWIG_2")]
  public static extern void Object_Transform__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_TransformRect")]
  public static extern void Object_TransformRect(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetDisplayTime")]
  public static extern void Object_SetDisplayTime(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetDisplayTime")]
  public static extern int Object_GetDisplayTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_DrawAtOffset__SWIG_0")]
  public static extern void Object_DrawAtOffset__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_DrawAtOffset__SWIG_1")]
  public static extern void Object_DrawAtOffset__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetPropX")]
  public static extern int Object_GetPropX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetPropY")]
  public static extern int Object_GetPropY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetXY")]
  public static extern global::System.IntPtr Object_GetXY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetPos")]
  public static extern global::System.IntPtr Object_GetPos(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetPropX")]
  public static extern void Object_SetPropX(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetPropY")]
  public static extern void Object_SetPropY(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetXY__SWIG_0")]
  public static extern void Object_SetXY__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetPos")]
  public static extern void Object_SetPos(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetXY__SWIG_1")]
  public static extern void Object_SetXY__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetAlpha")]
  public static extern int Object_GetAlpha(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetAlpha")]
  public static extern void Object_SetAlpha(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetFlipX")]
  public static extern void Object_SetFlipX(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetFlipY")]
  public static extern void Object_SetFlipY(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetVelX")]
  public static extern float Object_GetVelX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetVelY")]
  public static extern float Object_GetVelY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetVelXY")]
  public static extern global::System.IntPtr Object_GetVelXY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetVelX")]
  public static extern void Object_SetVelX(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetVelY")]
  public static extern void Object_SetVelY(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetVelXY__SWIG_0")]
  public static extern void Object_SetVelXY__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetVelXY__SWIG_1")]
  public static extern void Object_SetVelXY__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetWidth")]
  public static extern int Object_GetWidth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetHeight")]
  public static extern int Object_GetHeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetCenter")]
  public static extern global::System.IntPtr Object_GetCenter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ResetForNextFrame")]
  public static extern void Object_ResetForNextFrame(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_OnCollide")]
  public static extern void Object_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_OnAnimationLooped")]
  public static extern void Object_OnAnimationLooped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_IsDead")]
  public static extern bool Object_IsDead(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetIsDead")]
  public static extern void Object_SetIsDead(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetLayer")]
  public static extern global::System.IntPtr Object_GetLayer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetLayer")]
  public static extern void Object_SetLayer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ApplyImpulse__SWIG_0")]
  public static extern void Object_ApplyImpulse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ApplyImpulse__SWIG_1")]
  public static extern void Object_ApplyImpulse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_LoadFromObjectDef")]
  public static extern bool Object_LoadFromObjectDef(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_FinishLoading")]
  public static extern bool Object_FinishLoading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_Object")]
  public static extern void delete_Object(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ContainsPoint")]
  public static extern bool Object_ContainsPoint(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ResetVolatileState")]
  public static extern void Object_ResetVolatileState(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_AddPrototype")]
  public static extern global::System.IntPtr Object_AddPrototype(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_CreateObject")]
  public static extern global::System.IntPtr Object_CreateObject(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetPropRotateVelocity")]
  public static extern float Object_GetPropRotateVelocity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetPropRotateVelocity")]
  public static extern void Object_SetPropRotateVelocity(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetPropObjectDefName")]
  public static extern string Object_GetPropObjectDefName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetPropObjectDefName")]
  public static extern void Object_SetPropObjectDefName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_GetPropDebugFlag")]
  public static extern bool Object_GetPropDebugFlag(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_SetPropDebugFlag")]
  public static extern void Object_SetPropDebugFlag(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_IsSensor")]
  public static extern bool Object_IsSensor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Position_set")]
  public static extern void Object_Position_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_Position_get")]
  public static extern global::System.IntPtr Object_Position_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_RotateVelocity_set")]
  public static extern void Object_RotateVelocity_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_RotateVelocity_get")]
  public static extern float Object_RotateVelocity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ObjectDefName_set")]
  public static extern void Object_ObjectDefName_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_ObjectDefName_get")]
  public static extern string Object_ObjectDefName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_DebugFlag_set")]
  public static extern void Object_DebugFlag_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Object_DebugFlag_get")]
  public static extern bool Object_DebugFlag_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_Clone")]
  public static extern global::System.IntPtr ObjectBackground_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectBackground_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_Init")]
  public static extern bool ObjectBackground_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_Shutdown")]
  public static extern void ObjectBackground_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_Update")]
  public static extern void ObjectBackground_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_Draw")]
  public static extern void ObjectBackground_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectBackground")]
  public static extern global::System.IntPtr new_ObjectBackground();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectBackground")]
  public static extern void delete_ObjectBackground(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_Clone")]
  public static extern global::System.IntPtr ObjectBounce_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectBounce_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_Init")]
  public static extern bool ObjectBounce_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_Shutdown")]
  public static extern void ObjectBounce_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_Update")]
  public static extern void ObjectBounce_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_LoadObjectProperties")]
  public static extern bool ObjectBounce_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_OnCollide")]
  public static extern void ObjectBounce_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectBounce")]
  public static extern global::System.IntPtr new_ObjectBounce();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectBounce")]
  public static extern void delete_ObjectBounce(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_Clone")]
  public static extern global::System.IntPtr ObjectCollectable_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectCollectable_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_Init")]
  public static extern bool ObjectCollectable_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_ResetVolatileState")]
  public static extern void ObjectCollectable_ResetVolatileState(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_Shutdown")]
  public static extern void ObjectCollectable_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_Update")]
  public static extern void ObjectCollectable_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_LoadObjectProperties")]
  public static extern bool ObjectCollectable_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectCollectable")]
  public static extern global::System.IntPtr new_ObjectCollectable();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectCollectable")]
  public static extern void delete_ObjectCollectable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_OnCollide")]
  public static extern void ObjectCollectable_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_GetPropConsumed")]
  public static extern bool ObjectCollectable_GetPropConsumed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_SetPropConsumed")]
  public static extern void ObjectCollectable_SetPropConsumed(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Button_active_set")]
  public static extern void Button_active_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Button_active_get")]
  public static extern bool Button_active_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Button_sprite_set")]
  public static extern void Button_sprite_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Button_sprite_get")]
  public static extern global::System.IntPtr Button_sprite_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_Button")]
  public static extern global::System.IntPtr new_Button();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_Button")]
  public static extern void delete_Button(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_Clone")]
  public static extern global::System.IntPtr ObjectController_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectController_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_Init")]
  public static extern bool ObjectController_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_Shutdown")]
  public static extern void ObjectController_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_Clear")]
  public static extern void ObjectController_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_Update")]
  public static extern void ObjectController_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_Draw")]
  public static extern void ObjectController_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_GetWidth")]
  public static extern int ObjectController_GetWidth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_GetHeight")]
  public static extern int ObjectController_GetHeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectController")]
  public static extern global::System.IntPtr new_ObjectController();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectController")]
  public static extern void delete_ObjectController(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Clone")]
  public static extern global::System.IntPtr ObjectCutBars_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectCutBars_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Clear")]
  public static extern void ObjectCutBars_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_LoadObjectProperties")]
  public static extern bool ObjectCutBars_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Init")]
  public static extern bool ObjectCutBars_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Shutdown")]
  public static extern void ObjectCutBars_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Start")]
  public static extern void ObjectCutBars_Start(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Stop")]
  public static extern void ObjectCutBars_Stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_SetText")]
  public static extern void ObjectCutBars_SetText(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Update")]
  public static extern void ObjectCutBars_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_Draw")]
  public static extern void ObjectCutBars_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectCutBars")]
  public static extern global::System.IntPtr new_ObjectCutBars();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectCutBars")]
  public static extern void delete_ObjectCutBars(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_Clone")]
  public static extern global::System.IntPtr ObjectDoor_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectDoor_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_Init")]
  public static extern bool ObjectDoor_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_Clear")]
  public static extern void ObjectDoor_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_Shutdown")]
  public static extern void ObjectDoor_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_Update")]
  public static extern void ObjectDoor_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_LoadObjectProperties")]
  public static extern bool ObjectDoor_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_Activate")]
  public static extern void ObjectDoor_Activate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectDoor")]
  public static extern global::System.IntPtr new_ObjectDoor();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectDoor")]
  public static extern void delete_ObjectDoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_GetName")]
  public static extern string ObjectDoor_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_Clone")]
  public static extern global::System.IntPtr ObjectEnemy_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectEnemy_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_Init")]
  public static extern bool ObjectEnemy_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_Shutdown")]
  public static extern void ObjectEnemy_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_Update")]
  public static extern void ObjectEnemy_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectEnemy")]
  public static extern global::System.IntPtr new_ObjectEnemy();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectEnemy")]
  public static extern void delete_ObjectEnemy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_OnCollide")]
  public static extern void ObjectEnemy_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_iSpawnedObjectCount_set")]
  public static extern void ObjectEnemy_iSpawnedObjectCount_set(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_iSpawnedObjectCount_get")]
  public static extern int ObjectEnemy_iSpawnedObjectCount_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_Clone")]
  public static extern global::System.IntPtr ObjectFan_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectFan_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_Init")]
  public static extern bool ObjectFan_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_Clear")]
  public static extern void ObjectFan_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_Shutdown")]
  public static extern void ObjectFan_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_Update")]
  public static extern void ObjectFan_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_OnCollide")]
  public static extern void ObjectFan_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_LoadObjectProperties")]
  public static extern bool ObjectFan_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectFan")]
  public static extern global::System.IntPtr new_ObjectFan();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectFan")]
  public static extern void delete_ObjectFan(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_Clone")]
  public static extern global::System.IntPtr ObjectPlayer_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectPlayer_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_Init")]
  public static extern bool ObjectPlayer_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_Shutdown")]
  public static extern void ObjectPlayer_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_Update")]
  public static extern void ObjectPlayer_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_OnCollide")]
  public static extern void ObjectPlayer_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_ResetVolatileState")]
  public static extern void ObjectPlayer_ResetVolatileState(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_OnAnimationLooped")]
  public static extern void ObjectPlayer_OnAnimationLooped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_PlayAnimation")]
  public static extern void ObjectPlayer_PlayAnimation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_GetNumRings")]
  public static extern int ObjectPlayer_GetNumRings(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectPlayer")]
  public static extern global::System.IntPtr new_ObjectPlayer();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectPlayer")]
  public static extern void delete_ObjectPlayer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_WantsToSlideOnLeftSide")]
  public static extern bool ObjectPlayer_WantsToSlideOnLeftSide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_WantsToSlideOnRightSide")]
  public static extern bool ObjectPlayer_WantsToSlideOnRightSide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_WantsToSlideOnAnySide")]
  public static extern bool ObjectPlayer_WantsToSlideOnAnySide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_SPRING_STRENGTH_X_get")]
  public static extern double DEFAULT_SPRING_STRENGTH_X_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_DEFAULT_SPRING_STRENGTH_Y_get")]
  public static extern double DEFAULT_SPRING_STRENGTH_Y_get();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_GetPropDirection")]
  public static extern global::System.IntPtr ObjectSpring_GetPropDirection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_SetPropDirection")]
  public static extern void ObjectSpring_SetPropDirection(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Clone")]
  public static extern global::System.IntPtr ObjectSpring_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectSpring_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Init")]
  public static extern bool ObjectSpring_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Clear")]
  public static extern void ObjectSpring_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Shutdown")]
  public static extern void ObjectSpring_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Update")]
  public static extern void ObjectSpring_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_LoadObjectProperties")]
  public static extern bool ObjectSpring_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectSpring")]
  public static extern global::System.IntPtr new_ObjectSpring();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectSpring")]
  public static extern void delete_ObjectSpring(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_OnCollide")]
  public static extern void ObjectSpring_OnCollide(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_IsSpringActive")]
  public static extern bool ObjectSpring_IsSpringActive(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Direction_set")]
  public static extern void ObjectSpring_Direction_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_Direction_get")]
  public static extern global::System.IntPtr ObjectSpring_Direction_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_Clone")]
  public static extern global::System.IntPtr ObjectStatic_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectStatic_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_LoadObjectProperties")]
  public static extern bool ObjectStatic_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_Init")]
  public static extern bool ObjectStatic_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_Shutdown")]
  public static extern void ObjectStatic_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_Update")]
  public static extern void ObjectStatic_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectStatic")]
  public static extern global::System.IntPtr new_ObjectStatic();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectStatic")]
  public static extern void delete_ObjectStatic(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_UpdateSpawns")]
  public static extern void ObjectStatic_UpdateSpawns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_Clone")]
  public static extern global::System.IntPtr ObjectText_Clone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_DynamicCastFrom")]
  public static extern global::System.IntPtr ObjectText_DynamicCastFrom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_Init")]
  public static extern bool ObjectText_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_Shutdown")]
  public static extern void ObjectText_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_Clear")]
  public static extern void ObjectText_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_Update")]
  public static extern void ObjectText_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_Draw")]
  public static extern void ObjectText_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_SetAvatarFilename")]
  public static extern bool ObjectText_SetAvatarFilename(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_SetModalActive")]
  public static extern void ObjectText_SetModalActive(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_LoadObjectProperties")]
  public static extern bool ObjectText_LoadObjectProperties(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_SetText")]
  public static extern void ObjectText_SetText(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_GetWidth")]
  public static extern int ObjectText_GetWidth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_GetHeight")]
  public static extern int ObjectText_GetHeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_ObjectText")]
  public static extern global::System.IntPtr new_ObjectText();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectText")]
  public static extern void delete_ObjectText(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_GetInstance")]
  public static extern global::System.IntPtr ObjectFactory_GetInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_SetInstance")]
  public static extern void ObjectFactory_SetInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_CreateInstance")]
  public static extern void ObjectFactory_CreateInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_FreeInstance")]
  public static extern void ObjectFactory_FreeInstance();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_Init")]
  public static extern int ObjectFactory_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_Shutdown")]
  public static extern void ObjectFactory_Shutdown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_GetClassNameFromXML")]
  public static extern string ObjectFactory_GetClassNameFromXML(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_CreateObjectFromXML")]
  public static extern global::System.IntPtr ObjectFactory_CreateObjectFromXML(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_CreateObject")]
  public static extern global::System.IntPtr ObjectFactory_CreateObject(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_AddObjectDefinition")]
  public static extern bool ObjectFactory_AddObjectDefinition(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_FindObjectDefinition")]
  public static extern global::System.IntPtr ObjectFactory_FindObjectDefinition(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_GetObjectDefinitionCount")]
  public static extern int ObjectFactory_GetObjectDefinitionCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_GetObjectDefinition")]
  public static extern string ObjectFactory_GetObjectDefinition(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_LoadObjectDefsFromXML")]
  public static extern bool ObjectFactory_LoadObjectDefsFromXML(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFactory_LoadObjectDefsFromIncludeXML")]
  public static extern bool ObjectFactory_LoadObjectDefsFromIncludeXML(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_ObjectFactory")]
  public static extern void delete_ObjectFactory(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_RegisterObjectPrototypes")]
  public static extern void RegisterObjectPrototypes();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_OnObjectsChanged")]
  public static extern void EditorBaseUI_OnObjectsChanged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_OnObjectsChangedSwigExplicitEditorBaseUI")]
  public static extern void EditorBaseUI_OnObjectsChangedSwigExplicitEditorBaseUI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_OnSelectionChanged")]
  public static extern void EditorBaseUI_OnSelectionChanged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_OnSelectionChangedSwigExplicitEditorBaseUI")]
  public static extern void EditorBaseUI_OnSelectionChangedSwigExplicitEditorBaseUI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_OnSelectedObjectMoved")]
  public static extern void EditorBaseUI_OnSelectedObjectMoved(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_OnSelectedObjectMovedSwigExplicitEditorBaseUI")]
  public static extern void EditorBaseUI_OnSelectedObjectMovedSwigExplicitEditorBaseUI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_EditorBaseUI")]
  public static extern void delete_EditorBaseUI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_EditorBaseUI")]
  public static extern global::System.IntPtr new_EditorBaseUI();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_EditorBaseUI_director_connect")]
  public static extern void EditorBaseUI_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, EditorBaseUI.SwigDelegateEditorBaseUI_0 delegate0, EditorBaseUI.SwigDelegateEditorBaseUI_1 delegate1, EditorBaseUI.SwigDelegateEditorBaseUI_2 delegate2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_Editor")]
  public static extern global::System.IntPtr new_Editor();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_Editor")]
  public static extern void delete_Editor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_CreateObject")]
  public static extern global::System.IntPtr Editor_CreateObject(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_CreateAndSelectObject")]
  public static extern void Editor_CreateAndSelectObject(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_CreateAndSelect_UsePreviousLayerAndObject")]
  public static extern void Editor_CreateAndSelect_UsePreviousLayerAndObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_MouseToLayerCoords")]
  public static extern void Editor_MouseToLayerCoords(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_SnapToGrid")]
  public static extern void Editor_SnapToGrid(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_UpdateSelectedObjectPosition")]
  public static extern void Editor_UpdateSelectedObjectPosition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_SelectObject")]
  public static extern void Editor_SelectObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_Draw")]
  public static extern void Editor_Draw(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_CommonUpdate")]
  public static extern void Editor_CommonUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_CommonAfterUpdate")]
  public static extern void Editor_CommonAfterUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_FlashText")]
  public static extern void Editor_FlashText(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_NoModeUpdate")]
  public static extern void Editor_NoModeUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_ResetVolatileLevelState")]
  public static extern void Editor_ResetVolatileLevelState(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_UpdateMove")]
  public static extern void Editor_UpdateMove(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_GetObjectUnderCursor")]
  public static extern global::System.IntPtr Editor_GetObjectUnderCursor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_SetDrawBoundingBoxes_AllObjects")]
  public static extern void Editor_SetDrawBoundingBoxes_AllObjects(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_Update")]
  public static extern void Editor_Update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_DeleteCurrentSelection")]
  public static extern void Editor_DeleteCurrentSelection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_GetPropSnapToGrid")]
  public static extern bool Editor_GetPropSnapToGrid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_SetPropSnapToGrid")]
  public static extern void Editor_SetPropSnapToGrid(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_GetPropSelection")]
  public static extern global::System.IntPtr Editor_GetPropSelection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_SetPropSelection")]
  public static extern void Editor_SetPropSelection(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_GetPropEditorUI")]
  public static extern global::System.IntPtr Editor_GetPropEditorUI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_Editor_SetPropEditorUI")]
  public static extern void Editor_SetPropEditorUI(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_b2Vec2_x_set")]
  public static extern void b2Vec2_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_b2Vec2_x_get")]
  public static extern float b2Vec2_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_b2Vec2_y_set")]
  public static extern void b2Vec2_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_b2Vec2_y_get")]
  public static extern float b2Vec2_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_new_b2Vec2")]
  public static extern global::System.IntPtr new_b2Vec2();

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_delete_b2Vec2")]
  public static extern void delete_b2Vec2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_GameWorld_SWIGUpcast")]
  public static extern global::System.IntPtr GameWorld_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBackground_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectBackground_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectBounce_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectBounce_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCollectable_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectCollectable_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectController_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectController_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectCutBars_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectCutBars_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectDoor_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectDoor_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectEnemy_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectEnemy_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectFan_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectFan_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectPlayer_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectPlayer_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectSpring_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectSpring_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectStatic_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectStatic_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("ninja-engine.dll", EntryPoint="CSharp_ObjectText_SWIGUpcast")]
  public static extern global::System.IntPtr ObjectText_SWIGUpcast(global::System.IntPtr jarg1);
}

public class engine {
  public static void StringSplit(string str, string delim, SWIGTYPE_p_std__vectorT_std__string_t results) {
    enginePINVOKE.StringSplit(str, delim, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(results));
    if (enginePINVOKE.SWIGPendingException.Pending) throw enginePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DebugTrace(string format) {
    enginePINVOKE.DebugTrace(format);
  }

  public static void RegisterObjectPrototypes() {
    enginePINVOKE.RegisterObjectPrototypes();
  }

  public static readonly int DEFAULT_SCREEN_SIZE_X = enginePINVOKE.DEFAULT_SCREEN_SIZE_X_get();
  public static readonly int DEFAULT_SCREEN_SIZE_Y = enginePINVOKE.DEFAULT_SCREEN_SIZE_Y_get();
  public static readonly string VERSION_STRING = enginePINVOKE.VERSION_STRING_get();
  public static readonly int FPS = enginePINVOKE.FPS_get();
  public static readonly int TIMESTEP = enginePINVOKE.TIMESTEP_get();
  public static readonly double ONEEIGHTY_OVER_PI = enginePINVOKE.ONEEIGHTY_OVER_PI_get();
  public static readonly double PI_OVER_ONEEIGHTY = enginePINVOKE.PI_OVER_ONEEIGHTY_get();
  public static readonly double TOLERANCE = enginePINVOKE.TOLERANCE_get();
  public static readonly int DEFAULT_DEBUG_MSG_LEVEL = enginePINVOKE.DEFAULT_DEBUG_MSG_LEVEL_get();
  public static readonly int DEFAULT_MUSIC_BUFFER_SIZE = enginePINVOKE.DEFAULT_MUSIC_BUFFER_SIZE_get();
  public static readonly int DEFAULT_MUSIC_DATA_SIZE = enginePINVOKE.DEFAULT_MUSIC_DATA_SIZE_get();
  public static readonly string REDIRECT_STDERR_FILENAME = enginePINVOKE.REDIRECT_STDERR_FILENAME_get();
  public static readonly double DEFAULT_SPRING_STRENGTH_X = enginePINVOKE.DEFAULT_SPRING_STRENGTH_X_get();
  public static readonly double DEFAULT_SPRING_STRENGTH_Y = enginePINVOKE.DEFAULT_SPRING_STRENGTH_Y_get();
}

public class SWIGTYPE_p_CameraFollow {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CameraFollow(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CameraFollow() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CameraFollow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_float {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_float(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_float() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_float obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_b2WorldManifold {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_b2WorldManifold(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_b2WorldManifold() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_b2WorldManifold obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_XMLNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_XMLNode(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_XMLNode() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_XMLNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Sprite {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Sprite(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Sprite() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Sprite obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Camera {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Camera(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Camera() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Camera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ALLEGRO_COLOR {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ALLEGRO_COLOR(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ALLEGRO_COLOR() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ALLEGRO_COLOR obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p__Rect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p__Rect(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p__Rect() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p__Rect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}
